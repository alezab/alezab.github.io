{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"hashset/","title":"Hashset","text":"<p>Here are Java code snippets formatted in Markdown for common operations involving <code>HashMap</code> key-value iteration and sorting collections:</p>"},{"location":"hashset/#iterate-over-a-hashmap-key-value-pairs","title":"\ud83d\udd01 Iterate over a HashMap (Key-Value Pairs)","text":"<pre><code>import java.util.HashMap;\nimport java.util.Map;\n\npublic class HashMapIterationExample {\n    public static void main(String[] args) {\n        HashMap&lt;String, Integer&gt; map = new HashMap&lt;&gt;();\n        map.put(\"apple\", 3);\n        map.put(\"banana\", 1);\n        map.put(\"cherry\", 2);\n\n        // Method 1: Using entrySet()\n        for (Map.Entry&lt;String, Integer&gt; entry : map.entrySet()) {\n            System.out.println(entry.getKey() + \" =&gt; \" + entry.getValue());\n        }\n\n        // Method 2: Using keySet()\n        for (String key : map.keySet()) {\n            System.out.println(key + \" =&gt; \" + map.get(key));\n        }\n\n        // Method 3: Using forEach with lambda\n        map.forEach((key, value) -&gt; System.out.println(key + \" =&gt; \" + value));\n    }\n}\n</code></pre>"},{"location":"hashset/#sort-a-list-of-integers","title":"\ud83d\udd3d Sort a List of Integers","text":"<pre><code>import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class SortListExample {\n    public static void main(String[] args) {\n        List&lt;Integer&gt; numbers = Arrays.asList(5, 2, 8, 1, 3);\n\n        // Ascending order\n        Collections.sort(numbers);\n        System.out.println(\"Ascending: \" + numbers);\n\n        // Descending order\n        Collections.sort(numbers, Collections.reverseOrder());\n        System.out.println(\"Descending: \" + numbers);\n    }\n}\n</code></pre>"},{"location":"hashset/#sort-a-hashmap-by-keys-or-values","title":"\ud83d\udd20 Sort a HashMap by Keys or Values","text":"<pre><code>import java.util.*;\n\npublic class SortMapExample {\n    public static void main(String[] args) {\n        Map&lt;String, Integer&gt; map = new HashMap&lt;&gt;();\n        map.put(\"banana\", 2);\n        map.put(\"apple\", 5);\n        map.put(\"cherry\", 1);\n\n        // Sort by keys\n        map.entrySet().stream()\n           .sorted(Map.Entry.comparingByKey())\n           .forEach(entry -&gt; System.out.println(entry.getKey() + \" =&gt; \" + entry.getValue()));\n\n        // Sort by values\n        map.entrySet().stream()\n           .sorted(Map.Entry.comparingByValue())\n           .forEach(entry -&gt; System.out.println(entry.getKey() + \" =&gt; \" + entry.getValue()));\n    }\n}\n</code></pre> <p>Let me know if you want versions for Java 8+, parallel streams, or sorted maps (<code>TreeMap</code>).</p>"},{"location":"java_abstract/","title":"Klasy abstrakcyjne w Javie","text":""},{"location":"java_abstract/#definicja","title":"Definicja","text":"<p>Klasa abstrakcyjna to klasa, kt\u00f3rej nie mo\u017cna zainicjalizowa\u0107 (nie mo\u017cna utworzy\u0107 jej obiektu). S\u0142u\u017cy jako baza dla innych klas. Mo\u017ce zawiera\u0107 metody abstrakcyjne (bez implementacji) oraz metody z implementacj\u0105.</p>"},{"location":"java_abstract/#deklaracja-klasy-abstrakcyjnej","title":"Deklaracja klasy abstrakcyjnej","text":"<p>Aby zadeklarowa\u0107 klas\u0119 abstrakcyjn\u0105, u\u017cywamy s\u0142owa kluczowego <code>abstract</code>:</p> <pre><code>public abstract class Animal {\n    public abstract void makeSound(); // metoda abstrakcyjna\n    public void sleep() {\n        System.out.println(\"Sleeping...\");\n    }\n}\n</code></pre>"},{"location":"java_abstract/#metoda-abstrakcyjna-brak-implementacji","title":"Metoda abstrakcyjna \u2013 brak implementacji","text":"<p>Metoda abstrakcyjna w klasie abstrakcyjnej nie zawiera implementacji, czyli nie ma cia\u0142a (nie piszemy <code>{ ... }</code>). Zamiast tego ko\u0144czymy deklaracj\u0119 \u015brednikiem:</p> <pre><code>public abstract void makeSound(); // poprawnie \u2013 bez cia\u0142a\n</code></pre> <p>Pr\u00f3ba dodania cia\u0142a do metody abstrakcyjnej spowoduje b\u0142\u0105d kompilacji.</p> <p>Metody nieabstrakcyjne (zwyk\u0142e) w klasie abstrakcyjnej mog\u0105 mie\u0107 normaln\u0105 implementacj\u0119:</p> <pre><code>public void sleep() {\n    System.out.println(\"Sleeping...\");\n}\n</code></pre>"},{"location":"java_abstract/#dziedziczenie-po-klasie-abstrakcyjnej","title":"Dziedziczenie po klasie abstrakcyjnej","text":"<p>Klasa dziedzicz\u0105ca po klasie abstrakcyjnej musi zaimplementowa\u0107 wszystkie jej metody abstrakcyjne:</p> <pre><code>public class Dog extends Animal {\n    @Override\n    public void makeSound() {\n        System.out.println(\"Woof!\");\n    }\n}\n</code></pre>"},{"location":"java_abstract/#cechy-klas-abstrakcyjnych","title":"Cechy klas abstrakcyjnych","text":"<ul> <li>Nie mo\u017cna utworzy\u0107 obiektu klasy abstrakcyjnej: <code>new Animal()</code> \u2013 b\u0142\u0105d kompilacji.</li> <li>Mog\u0105 zawiera\u0107 zar\u00f3wno metody abstrakcyjne, jak i zwyk\u0142e.</li> <li>Mog\u0105 mie\u0107 pola i konstruktory.</li> <li>S\u0142u\u017c\u0105 do definiowania wsp\u00f3lnego interfejsu dla klas pochodnych.</li> </ul>"},{"location":"java_abstract/#czy-klasa-abstrakcyjna-moze-miec-nieabstrakcyjne-metody","title":"Czy klasa abstrakcyjna mo\u017ce mie\u0107 nieabstrakcyjne metody?","text":"<p>Tak, klasa abstrakcyjna mo\u017ce zawiera\u0107 zar\u00f3wno metody abstrakcyjne (bez implementacji), jak i metody nieabstrakcyjne (z implementacj\u0105). Dzi\u0119ki temu mo\u017cna w niej umie\u015bci\u0107 wsp\u00f3lne zachowania dla wszystkich klas pochodnych.</p> <p>Przyk\u0142ad: <pre><code>public abstract class Shape {\n    public abstract double area(); // metoda abstrakcyjna\n    public void printInfo() {      // metoda nieabstrakcyjna\n        System.out.println(\"To jest figura.\");\n    }\n}\n</code></pre></p>"},{"location":"java_abstract/#przykad-uzycia","title":"Przyk\u0142ad u\u017cycia","text":"<pre><code>Animal myDog = new Dog();\nmyDog.makeSound(); // Woof!\nmyDog.sleep();     // Sleeping...\n</code></pre>"},{"location":"java_arr/","title":"Java arr","text":""},{"location":"java_arr/#wyjasnienie-public-void-addperson-people","title":"Wyja\u015bnienie: public void add(Person... people)","text":"<p>S\u0142owo kluczowe <code>...</code> (trzy kropki) w deklaracji metody oznacza tzw. varargs (zmienn\u0105 liczb\u0119 argument\u00f3w). Dzi\u0119ki temu metoda <code>add</code> mo\u017ce przyjmowa\u0107 dowoln\u0105 liczb\u0119 argument\u00f3w typu <code>Person</code> (w tym zero).</p> <p>Przyk\u0142ad u\u017cycia: <pre><code>add(person1);\nadd(person1, person2, person3);\nadd(); // wywo\u0142anie bez argument\u00f3w te\u017c jest poprawne\n</code></pre></p> <p>Wewn\u0105trz metody <code>people</code> jest traktowane jak tablica (<code>Person[]</code>).</p> <pre><code>public void add(Person... people) {\n    for (Person p : people) {\n        // operacje na ka\u017cdym obiekcie Person\n    }\n}\n</code></pre>"},{"location":"java_basic1/","title":"Java \u2013 Tworzenie obiekt\u00f3w i wywo\u0142ywanie metod","text":""},{"location":"java_basic1/#tworzenie-obiektow","title":"Tworzenie obiekt\u00f3w","text":"<p>Aby utworzy\u0107 obiekt klasy w Javie, u\u017cywamy s\u0142owa kluczowego <code>new</code>:</p> <pre><code>NazwaKlasy nazwaObiektu = new NazwaKlasy();\n</code></pre> <p>Przyk\u0142ad: <pre><code>Car myCar = new Car();\n</code></pre></p>"},{"location":"java_basic1/#wywoywanie-metod-instancyjnych-normalnych","title":"Wywo\u0142ywanie metod instancyjnych (normalnych)","text":"<p>Metody instancyjne wywo\u0142ujemy na obiekcie:</p> <pre><code>nazwaObiektu.nazwaMetody();\n</code></pre> <p>Przyk\u0142ad: <pre><code>myCar.startEngine();\n</code></pre></p>"},{"location":"java_basic1/#wywoywanie-metod-statycznych","title":"Wywo\u0142ywanie metod statycznych","text":"<p>Metody statyczne wywo\u0142ujemy na klasie (bez tworzenia obiektu):</p> <pre><code>NazwaKlasy.nazwaMetodyStatycznej();\n</code></pre> <p>Przyk\u0142ad: <pre><code>Math.abs(-5);\n</code></pre></p> <p>Mo\u017cna te\u017c wywo\u0142a\u0107 metod\u0119 statyczn\u0105 przez obiekt, ale nie jest to zalecane: <pre><code>myCar.staticMethod();\n</code></pre></p>"},{"location":"java_basic1/#podsumowanie","title":"Podsumowanie","text":"<ul> <li>Obiekt: <code>NazwaKlasy nazwa = new NazwaKlasy();</code></li> <li>Metoda instancyjna: <code>nazwaObiektu.metoda();</code></li> <li>Metoda statyczna: <code>NazwaKlasy.metodaStatyczna();</code></li> </ul>"},{"location":"java_copies/","title":"Deep, Shallow i Lazy Copy w Javie","text":""},{"location":"java_copies/#shallow-copy-pytka-kopia","title":"Shallow Copy (P\u0142ytka kopia)","text":"<ul> <li>Tworzy nowy obiekt, ale kopiowane s\u0105 tylko referencje do obiekt\u00f3w zagnie\u017cd\u017conych.</li> <li>Zmiana w zagnie\u017cd\u017conym obiekcie w kopii wp\u0142ywa na orygina\u0142.</li> </ul> <p>Przyk\u0142ad: <pre><code>class Person implements Cloneable {\n    String name;\n    Address address;\n\n    public Person clone() throws CloneNotSupportedException {\n        return (Person) super.clone(); // shallow copy\n    }\n}\n\nclass Address {\n    String city;\n}\n</code></pre></p>"},{"location":"java_copies/#deep-copy-geboka-kopia","title":"Deep Copy (G\u0142\u0119boka kopia)","text":"<ul> <li>Tworzy nowy obiekt oraz nowe kopie wszystkich obiekt\u00f3w zagnie\u017cd\u017conych.</li> <li>Zmiana w kopii nie wp\u0142ywa na orygina\u0142.</li> </ul> <p>Przyk\u0142ad: <pre><code>class Person implements Cloneable {\n    String name;\n    Address address;\n\n    public Person clone() throws CloneNotSupportedException {\n        Person cloned = (Person) super.clone();\n        cloned.address = new Address(address.city); // deep copy\n        return cloned;\n    }\n}\n\nclass Address {\n    String city;\n    Address(String city) { this.city = city; }\n}\n</code></pre></p>"},{"location":"java_copies/#lazy-copy-kopia-leniwa-copy-on-write","title":"Lazy Copy (Kopia leniwa, copy-on-write)","text":"<ul> <li>Kopia tworzona jest dopiero przy pr\u00f3bie modyfikacji (copy-on-write).</li> <li>Oszcz\u0119dza pami\u0119\u0107, dop\u00f3ki nie zajdzie potrzeba rozdzielenia obiekt\u00f3w.</li> </ul> <p>Przyk\u0142ad: <pre><code>class LazyCopyList {\n    private List&lt;String&gt; data;\n    private boolean shared = true;\n\n    public LazyCopyList(List&lt;String&gt; data) {\n        this.data = data;\n    }\n\n    public void set(int idx, String value) {\n        if (shared) {\n            data = new ArrayList&lt;&gt;(data); // copy on write\n            shared = false;\n        }\n        data.set(idx, value);\n    }\n}\n</code></pre></p>"},{"location":"java_copies/#referencja","title":"Referencja","text":"<ul> <li>Java Deep vs Shallow Copy</li> <li>Copy-on-write w Java Collections</li> </ul>"},{"location":"java_enums/","title":"Enumy w Javie","text":""},{"location":"java_enums/#co-to-jest-enum","title":"Co to jest enum?","text":"<p>Enum (typ wyliczeniowy) to specjalny typ w Javie, kt\u00f3ry reprezentuje zbi\u00f3r sta\u0142ych, nazwanych warto\u015bci.</p>"},{"location":"java_enums/#przykad-deklaracji-enuma","title":"Przyk\u0142ad deklaracji enuma","text":"<pre><code>public enum Day {\n    MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY\n}\n</code></pre>"},{"location":"java_enums/#uzycie-enuma","title":"U\u017cycie enuma","text":"<pre><code>Day today = Day.MONDAY;\n\nif (today == Day.MONDAY) {\n    System.out.println(\"Dzisiaj jest poniedzia\u0142ek!\");\n}\n</code></pre>"},{"location":"java_enums/#enum-w-nagowku-metody-jako-argument","title":"Enum w nag\u0142\u00f3wku metody (jako argument)","text":"<pre><code>public void printDay(Day day) {\n    System.out.println(\"Wybrany dzie\u0144: \" + day);\n}\n</code></pre> <p>Wywo\u0142anie: <pre><code>printDay(Day.FRIDAY);\n</code></pre></p>"},{"location":"java_enums/#enum-jako-typ-zwracany-przez-metode","title":"Enum jako typ zwracany przez metod\u0119","text":"<pre><code>public Day getNextDay(Day day) {\n    switch(day) {\n        case MONDAY: return Day.TUESDAY;\n        // ...pozosta\u0142e przypadki...\n        case SUNDAY: return Day.MONDAY;\n        default: throw new IllegalArgumentException();\n    }\n}\n</code></pre>"},{"location":"java_enums/#enum-z-polami-i-metodami","title":"Enum z polami i metodami","text":"<pre><code>public enum Color {\n    RED(\"#FF0000\"),\n    GREEN(\"#00FF00\"),\n    BLUE(\"#0000FF\");\n\n    private final String hex;\n\n    Color(String hex) {\n        this.hex = hex;\n    }\n\n    public String getHex() {\n        return hex;\n    }\n}\n</code></pre> <p>U\u017cycie: <pre><code>Color c = Color.RED;\nSystem.out.println(c.getHex()); // \"#FF0000\"\n</code></pre></p>"},{"location":"java_enums/#iterowanie-po-wartosciach-enuma","title":"Iterowanie po warto\u015bciach enuma","text":"<pre><code>for (Day d : Day.values()) {\n    System.out.println(d);\n}\n</code></pre>"},{"location":"java_exceptions/","title":"Obs\u0142uga wyj\u0105tk\u00f3w w Javie \u2013 try-catch vs throws vs throw new","text":""},{"location":"java_exceptions/#try-catch","title":"try-catch","text":"<p>S\u0142u\u017cy do przechwytywania i obs\u0142ugi wyj\u0105tk\u00f3w w miejscu, gdzie mog\u0105 wyst\u0105pi\u0107.</p> <p>Przyk\u0142ad: <pre><code>try {\n    int x = 10 / 0;\n} catch (ArithmeticException e) {\n    System.out.println(\"B\u0142\u0105d: dzielenie przez zero!\");\n}\n</code></pre></p>"},{"location":"java_exceptions/#try-catch-z-warunkiem","title":"try-catch z warunkiem","text":"<p>Mo\u017cesz u\u017cy\u0107 instrukcji warunkowej (<code>if</code>) wewn\u0105trz bloku <code>try</code>, aby obs\u0142u\u017cy\u0107 r\u00f3\u017cne sytuacje, a wyj\u0105tek rzuci\u0107 tylko, gdy warunek jest spe\u0142niony:</p> <pre><code>try {\n    if (x &lt; 0) {\n        throw new IllegalArgumentException(\"x nie mo\u017ce by\u0107 ujemne\");\n    }\n    // dalszy kod\n} catch (IllegalArgumentException e) {\n    System.out.println(\"B\u0142\u0105d: \" + e.getMessage());\n}\n</code></pre> <p>Mo\u017cesz te\u017c mie\u0107 kilka r\u00f3\u017cnych warunk\u00f3w i rzuca\u0107 r\u00f3\u017cne wyj\u0105tki w zale\u017cno\u015bci od sytuacji:</p> <pre><code>try {\n    if (x &lt; 0) {\n        throw new IllegalArgumentException(\"x &lt; 0\");\n    }\n    if (x == 0) {\n        throw new ArithmeticException(\"x == 0\");\n    }\n    // dalszy kod\n} catch (IllegalArgumentException e) {\n    System.out.println(\"Nieprawid\u0142owy argument: \" + e.getMessage());\n} catch (ArithmeticException e) {\n    System.out.println(\"B\u0142\u0105d arytmetyczny: \" + e.getMessage());\n}\n</code></pre>"},{"location":"java_exceptions/#throws","title":"throws","text":"<p>S\u0142u\u017cy do deklarowania, \u017ce metoda mo\u017ce zg\u0142osi\u0107 wyj\u0105tek, ale nie obs\u0142uguje go bezpo\u015brednio. Przerzuca odpowiedzialno\u015b\u0107 za obs\u0142ug\u0119 wyj\u0105tku na wywo\u0142uj\u0105cego.</p> <p>Przyk\u0142ad: <pre><code>public void readFile() throws IOException {\n    // kod, kt\u00f3ry mo\u017ce rzuci\u0107 IOException\n}\n</code></pre></p>"},{"location":"java_exceptions/#tworzenie-wasnych-wyjatkow-custom-exceptions","title":"Tworzenie w\u0142asnych wyj\u0105tk\u00f3w (Custom Exceptions)","text":"<p>Mo\u017cesz utworzy\u0107 w\u0142asn\u0105 klas\u0119 wyj\u0105tku, dziedzicz\u0105c po klasie <code>Exception</code> lub <code>RuntimeException</code>:</p> <pre><code>public class CustomException extends Exception {\n    public CustomException(String message) {\n        super(message);\n    }\n}\n</code></pre> <p>U\u017cycie w\u0142asnego wyj\u0105tku:</p> <pre><code>if (warunek_bledu) {\n    throw new CustomException(\"Customowy exception\");\n}\n</code></pre>"},{"location":"java_exceptions/#throw-new","title":"throw new","text":"<p>S\u0142u\u017cy do r\u0119cznego zg\u0142aszania wyj\u0105tku.</p> <p>Przyk\u0142ad: <pre><code>if (x &lt; 0) {\n    throw new IllegalArgumentException(\"x nie mo\u017ce by\u0107 ujemne\");\n}\n</code></pre></p>"},{"location":"java_exceptions/#podsumowanie","title":"Podsumowanie","text":"<ul> <li>try-catch \u2013 obs\u0142uga wyj\u0105tku tu i teraz.</li> <li>throws \u2013 informacja, \u017ce metoda mo\u017ce rzuci\u0107 wyj\u0105tek (obs\u0142uga gdzie indziej).</li> <li>throw new \u2013 r\u0119czne zg\u0142oszenie wyj\u0105tku.</li> </ul>"},{"location":"java_fields/","title":"Modyfikatory dost\u0119pu do p\u00f3l w Javie","text":""},{"location":"java_fields/#typy-modyfikatorow-dostepu","title":"Typy modyfikator\u00f3w dost\u0119pu","text":"<ul> <li>private \u2013 pole dost\u0119pne tylko w tej samej klasie.</li> <li>protected \u2013 pole dost\u0119pne w tej samej klasie, w klasach dziedzicz\u0105cych oraz w tym samym pakiecie.</li> <li>public \u2013 pole dost\u0119pne z dowolnego miejsca.</li> <li>(default) \u2013 brak modyfikatora, pole dost\u0119pne tylko w tym samym pakiecie.</li> </ul>"},{"location":"java_fields/#przykady","title":"Przyk\u0142ady","text":"<pre><code>public class Person {\n    private String name;      // tylko w tej klasie\n    protected int age;        // w tej klasie, klasach dziedzicz\u0105cych i pakiecie\n    public String address;    // wsz\u0119dzie\n    double salary;            // (default) tylko w pakiecie\n}\n</code></pre>"},{"location":"java_fields/#czy-pola-w-klasie-abstrakcyjnej-musza-byc-protected","title":"Czy pola w klasie abstrakcyjnej musz\u0105 by\u0107 <code>protected</code>?","text":"<p>Nie, pola w klasie abstrakcyjnej mog\u0105 mie\u0107 dowolny modyfikator dost\u0119pu (<code>private</code>, <code>protected</code>, <code>public</code>, (default)). Wyb\u00f3r zale\u017cy od tego, czy chcesz, aby by\u0142y widoczne w podklasach lub poza pakietem. Najcz\u0119\u015bciej stosuje si\u0119 <code>protected</code> dla p\u00f3l, kt\u00f3re maj\u0105 by\u0107 dost\u0119pne w podklasach, ale nie jest to wymagane.</p> <p>Przyk\u0142ad: <pre><code>public abstract class Animal {\n    private String name;       // tylko w tej klasie\n    protected int age;         // w podklasach i pakiecie\n    public String type;        // wsz\u0119dzie\n}\n</code></pre></p>"},{"location":"java_fields/#podsumowanie","title":"Podsumowanie","text":"Modyfikator Ta sama klasa Ten sam pakiet Podklasa Inne pakiety private \u2714 (default) \u2714 \u2714 protected \u2714 \u2714 \u2714 public \u2714 \u2714 \u2714 \u2714"},{"location":"java_if_blocks/","title":"Instrukcja if w Javie \u2013 sprawdzanie przedzia\u0142\u00f3w, AND, OR","text":""},{"location":"java_if_blocks/#sprawdzanie-czy-wartosc-jest-w-przedziale","title":"Sprawdzanie czy warto\u015b\u0107 jest w przedziale","text":"<p><pre><code>int x = 7;\nif (x &gt;= 5 &amp;&amp; x &lt;= 10) {\n    System.out.println(\"x jest w przedziale 5-10\");\n}\n</code></pre> - <code>&amp;&amp;</code> (AND) \u2013 oba warunki musz\u0105 by\u0107 spe\u0142nione.</p>"},{"location":"java_if_blocks/#sprawdzanie-czy-wartosc-jest-poza-przedziaem","title":"Sprawdzanie czy warto\u015b\u0107 jest poza przedzia\u0142em","text":"<p><pre><code>if (x &lt; 5 || x &gt; 10) {\n    System.out.println(\"x jest poza przedzia\u0142em 5-10\");\n}\n</code></pre> - <code>||</code> (OR) \u2013 wystarczy, \u017ce jeden z warunk\u00f3w jest spe\u0142niony.</p>"},{"location":"java_if_blocks/#przykad-z-negacja","title":"Przyk\u0142ad z negacj\u0105","text":"<pre><code>if (!(x &gt;= 5 &amp;&amp; x &lt;= 10)) {\n    System.out.println(\"x jest poza przedzia\u0142em 5-10\");\n}\n</code></pre>"},{"location":"java_if_blocks/#aczenie-wielu-warunkow","title":"\u0141\u0105czenie wielu warunk\u00f3w","text":"<pre><code>if ((x &gt; 0 &amp;&amp; x &lt; 100) || x == 200) {\n    System.out.println(\"x jest w przedziale 1-99 lub r\u00f3wne 200\");\n}\n</code></pre>"},{"location":"java_iterators/","title":"Java iterators","text":""},{"location":"java_iterators/#integercompare-vs-manual-return-1-10-in-java-iteratorscomparators","title":"Integer.compare vs manual return 1/-1/0 in Java iterators/comparators","text":"<p>Przy implementacji metod por\u00f3wnuj\u0105cych (np. w Comparatorach lub metodach sortuj\u0105cych w iteratorach), mo\u017cna spotka\u0107 dwa podej\u015bcia:</p>"},{"location":"java_iterators/#1-manualne-zwracanie-1-1-0","title":"1. Manualne zwracanie 1, -1, 0","text":"<pre><code>@Override\npublic int compare(Integer a, Integer b) {\n    if (a &lt; b) return -1;\n    if (a &gt; b) return 1;\n    return 0;\n}\n</code></pre>"},{"location":"java_iterators/#2-uzycie-integercompare","title":"2. U\u017cycie Integer.compare","text":"<pre><code>@Override\npublic int compare(Integer a, Integer b) {\n    return Integer.compare(a, b);\n}\n</code></pre>"},{"location":"java_iterators/#roznice-i-zalety","title":"R\u00f3\u017cnice i zalety","text":"<ul> <li><code>Integer.compare(a, b)</code> jest kr\u00f3tsze, czytelniejsze i mniej podatne na b\u0142\u0119dy.</li> <li>Manualne por\u00f3wnania mog\u0105 prowadzi\u0107 do b\u0142\u0119d\u00f3w, np. przy por\u00f3wnywaniu warto\u015bci granicznych (np. przepe\u0142nienie typu int).</li> <li><code>Integer.compare</code> poprawnie obs\u0142uguje wszystkie przypadki, tak\u017ce warto\u015bci skrajne.</li> </ul> <p>Rekomendacja: Zawsze u\u017cywaj <code>Integer.compare</code> (lub odpowiednich metod dla innych typ\u00f3w prymitywnych), gdy implementujesz metody por\u00f3wnuj\u0105ce w iteratorach, comparatorach itp.</p>"},{"location":"java_iterators/#gdzie-wykorzystujemy-funkcje-compare","title":"Gdzie wykorzystujemy funkcje compare","text":"<p>Funkcje por\u00f3wnuj\u0105ce (<code>compare</code>, np. z Comparatora) s\u0105 szeroko wykorzystywane w Javie, m.in. w:</p> <ul> <li> <p>Sortowaniu kolekcji   Metody takie jak <code>Collections.sort(List, Comparator)</code> lub <code>List.sort(Comparator)</code> u\u017cywaj\u0105 funkcji compare do ustalania kolejno\u015bci element\u00f3w.</p> </li> <li> <p>Strukturach danych opartych o porz\u0105dek   Struktury takie jak <code>TreeSet</code>, <code>TreeMap</code> wymagaj\u0105 Comparatora lub Comparable do utrzymania uporz\u0105dkowania element\u00f3w.</p> </li> <li> <p>Algorytmach wyszukiwania i przetwarzania   Metody takie jak <code>Collections.binarySearch(List, key, Comparator)</code> wykorzystuj\u0105 compare do por\u00f3wnywania element\u00f3w podczas wyszukiwania binarnego.</p> </li> <li> <p>Priorytetowe kolejki   Klasa <code>PriorityQueue</code> mo\u017ce korzysta\u0107 z Comparatora do ustalania priorytet\u00f3w element\u00f3w.</p> </li> </ul> <p>Podsumowanie: Funkcje compare s\u0105 kluczowe wsz\u0119dzie tam, gdzie potrzebne jest porz\u0105dkowanie, sortowanie lub por\u00f3wnywanie element\u00f3w w kolekcjach i strukturach danych.</p>"},{"location":"java_kolokwium_24/","title":"Zadanie: Klasa abstrakcyjna Clock","text":""},{"location":"java_kolokwium_24/#tresc-polecenia","title":"Tre\u015b\u0107 polecenia","text":"<p>Napisz klas\u0119 abstrakcyjn\u0105 <code>Clock</code> przechowuj\u0105c\u0105 wewn\u0119trznie stan zegara, posiadaj\u0105c\u0105 publiczne metody: - <code>setCurrentTime</code>, kt\u00f3ra ustawia czas zegara na bie\u017c\u0105c\u0105 godzin\u0119 zgodnie z zegarem systemowym. - <code>setTime</code>, kt\u00f3ra przyjmuje trzy zmienne ca\u0142kowite - godzin\u0119, minut\u0119 i sekund\u0119 i ustawia zgodnie z ni\u0105 czas zegara. Je\u017celi dane nie s\u0105 poprawne w kontek\u015bcie zegara 24-godzinnego, nale\u017cy rzuci\u0107 wyj\u0105tek <code>IllegalArgumentException</code> i opisa\u0107 przyczyn\u0119 w wiadomo\u015bci tego wyj\u0105tku (kt\u00f3ra ze zmiennych nie mie\u015bci si\u0119 w jakim zakresie). - <code>toString</code>, kt\u00f3ra zwraca napis zawieraj\u0105cy godzin\u0119 w formacie hh:mm:ss.</p> <p>Spos\u00f3b przechowywania czasu w zegarze zaproponuj samodzielnie.</p>"},{"location":"java_kolokwium_24/#implementacja-klasy-clock-z-uzyciem-localtime-i-datetimeformatter","title":"Implementacja klasy Clock (z u\u017cyciem LocalTime i DateTimeFormatter)","text":"<pre><code>// filepath: src\\Clock.java\nimport java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\n\npublic abstract class Clock {\n    protected LocalTime time;\n    private static final DateTimeFormatter FORMATTER = DateTimeFormatter.ofPattern(\"HH:mm:ss\");\n    private City city;\n\n    public Clock(City city) {\n        this.city = city;\n        this.time = null;\n    }\n\n    protected void onTimeChanged() {\n        // domy\u015blnie nic nie robi, do nadpisania w AnalogClock\n    }\n\n    public void setCurrentTime() {\n        this.time = LocalTime.now();\n        onTimeChanged();\n    }\n\n    public void setTime(int hour, int minute, int second) {\n        if (hour &lt; 0 || hour &gt; 23) {\n            throw new IllegalArgumentException(\"Godzina (\" + hour + \") musi by\u0107 w zakresie 0-23.\");\n        }\n        if (minute &lt; 0 || minute &gt; 59) {\n            throw new IllegalArgumentException(\"Minuta (\" + minute + \") musi by\u0107 w zakresie 0-59.\");\n        }\n        if (second &lt; 0 || second &gt; 59) {\n            throw new IllegalArgumentException(\"Sekunda (\" + second + \") musi by\u0107 w zakresie 0-59.\");\n        }\n        this.time = LocalTime.of(hour, minute, second);\n        onTimeChanged();\n    }\n\n    /**\n     * Ustawia nowe miasto i przelicza czas na czas strefowy nowego miasta.\n     */\n    public void setCity(City newCity) {\n        if (this.city != null &amp;&amp; this.time != null) {\n            int oldTz = this.city.getSummerTimeZone();\n            int newTz = newCity.getSummerTimeZone();\n            int diff = newTz - oldTz;\n            this.time = this.time.plusHours(diff);\n        }\n        this.city = newCity;\n    }\n\n    public City getCity() {\n        return city;\n    }\n\n    @Override\n    public String toString() {\n        return time == null ? \"Brak ustawionego czasu\" : time.format(FORMATTER);\n    }\n}\n</code></pre>"},{"location":"java_kolokwium_24/#przykad-uzycia-klasy-clock-w-klasie-main-krok-1","title":"Przyk\u0142ad u\u017cycia klasy Clock w klasie Main (Krok 1)","text":"<pre><code>// filepath: src\\Main.java\npublic class Main {\n    public static void main(String[] args) {\n        Clock clock = new Clock() {};\n        clock.setCurrentTime();\n        System.out.println(\"Aktualny czas: \" + clock);\n\n        try {\n            clock.setTime(15, 30, 45);\n            System.out.println(\"Ustawiony czas: \" + clock);\n            clock.setTime(25, 0, 0); // B\u0142\u0105d!\n        } catch (IllegalArgumentException e) {\n            System.out.println(\"B\u0142\u0105d: \" + e.getMessage());\n        }\n\n        // Przyk\u0142ad u\u017cycia City.parseFile\n        String path = \"src\\\\strefy.csv\";\n        var cityMap = City.parseFile(path);\n        System.out.println(\"Wczytane miasta:\");\n        for (var entry : cityMap.entrySet()) {\n            System.out.println(entry.getKey() + \" -&gt; \" + entry.getValue());\n        }\n    }\n}\n</code></pre>"},{"location":"java_kolokwium_24/#krok-2-klasa-digitalclock-z-trybem-2412-godzinnym","title":"Krok 2. Klasa DigitalClock z trybem 24/12-godzinnym","text":"<p>Napisz klas\u0119 <code>DigitalClock</code>, dziedzicz\u0105c\u0105 po <code>Clock</code>. W klasie <code>DigitalClock</code> utw\u00f3rz publiczny typ wyliczeniowy pozwalaj\u0105cy na rozr\u00f3\u017cnienie mi\u0119dzy zegarem 24-godzinnym i 12-godzinnym. Dodaj argument tego typu do konstruktora. Je\u017celi ustawiony jest tryb 24-godzinny, metoda <code>toString</code> powinna wywo\u0142a\u0107 metod\u0119 <code>toString</code> klasy nadrz\u0119dnej. W trybie 12-godzinnym napis powinien ogranicza\u0107 si\u0119 do 12 godzin z dopiskiem AM lub PM i nie poprzedza\u0107 jednocyfrowej godziny zerem.</p>"},{"location":"java_kolokwium_24/#implementacja-klasy-digitalclock","title":"Implementacja klasy DigitalClock","text":"<pre><code>// filepath: src\\DigitalClock.java\nimport java.time.format.DateTimeFormatter;\n\npublic class DigitalClock extends Clock {\n    public enum Mode {\n        H24, H12\n    }\n\n    private final Mode mode;\n    private static final DateTimeFormatter FORMATTER_12H = DateTimeFormatter.ofPattern(\"h:mm:ss a\");\n\n    public DigitalClock(Mode mode) {\n        this.mode = mode;\n    }\n\n    @Override\n    public String toString() {\n        if (time == null) return \"Brak ustawionego czasu\";\n        if (mode == Mode.H24) {\n            return super.toString();\n        } else {\n            return time.format(FORMATTER_12H);\n        }\n    }\n}\n</code></pre>"},{"location":"java_kolokwium_24/#przykad-uzycia-klasy-digitalclock-w-klasie-maindigitalclock-krok-2","title":"Przyk\u0142ad u\u017cycia klasy DigitalClock w klasie MainDigitalClock (Krok 2)","text":"<pre><code>// filepath: src\\MainDigitalClock.java\npublic class Main {\n    public static void main(String[] args) {\n        DigitalClock clock24 = new DigitalClock(DigitalClock.Mode.H24);\n        clock24.setTime(9, 5, 3);\n        System.out.println(\"Tryb 24h: \" + clock24);\n\n        DigitalClock clock12 = new DigitalClock(DigitalClock.Mode.H12);\n        clock12.setTime(9, 5, 3);\n        System.out.println(\"Tryb 12h: \" + clock12);\n\n        clock12.setTime(15, 30, 45);\n        System.out.println(\"Tryb 12h (popo\u0142udnie): \" + clock12);\n\n        clock12.setTime(0, 0, 0);\n        System.out.println(\"Tryb 12h (p\u00f3\u0142noc): \" + clock12);\n    }\n}\n</code></pre>"},{"location":"java_kolokwium_24/#krok-3-klasa-city-i-wczytywanie-danych-z-pliku-csv","title":"Krok 3. Klasa City i wczytywanie danych z pliku CSV","text":"<p>Zapoznaj si\u0119 z plikiem <code>strefy.csv</code> do\u0142\u0105czonym do tre\u015bci zadania. Plik zawiera letnie strefy czasowe wybranych miast oraz ich wsp\u00f3\u0142rz\u0119dne geograficzne wyra\u017cone stopniami k\u0105towymi.</p> <p>Napisz klas\u0119 <code>City</code> zawieraj\u0105c\u0105 wszystkie dane z pojedynczego wiersza pliku. Napisz w niej metody statyczne: - prywatn\u0105 <code>parseLine</code>, przyjmuj\u0105c\u0105 pojedyncz\u0105 lini\u0119 pliku i zwracaj\u0105c\u0105 obiekt <code>City</code>, - publiczn\u0105 <code>parseFile</code>, przyjmuj\u0105c\u0105 \u015bcie\u017ck\u0119 do tego pliku i zwracaj\u0105c\u0105 map\u0119 zape\u0142nion\u0105 danymi z pliku, w kt\u00f3rej kluczem jest nazwa miasta, a warto\u015bci\u0105 obiekt <code>City</code>.</p> <p>W razie potrzeby, do ka\u017cdej z danych wczytanych do obiektu <code>City</code> mo\u017cna stworzy\u0107 publiczny akcesor. Wywo\u0142aj metod\u0119 <code>parseFile</code> przekazuj\u0105c jej \u015bcie\u017ck\u0119 do przyk\u0142adowego pliku.</p>"},{"location":"java_kolokwium_24/#implementacja-klasy-city","title":"Implementacja klasy City","text":"<pre><code>// filepath: src\\City.java\nimport java.util.*;\nimport java.io.*;\nimport java.nio.file.*;\nimport java.time.LocalTime;\n\npublic class City {\n    private final String name;\n    private final int summerTimeZone;\n    private final String latitude;\n    private final String longitude;\n\n    public City(String name, int summerTimeZone, String latitude, String longitude) {\n        this.name = name;\n        this.summerTimeZone = summerTimeZone;\n        this.latitude = latitude;\n        this.longitude = longitude;\n    }\n\n    public String getName() { return name; }\n    public int getSummerTimeZone() { return summerTimeZone; }\n    public String getLatitude() { return latitude; }\n    public String getLongitude() { return longitude; }\n\n    private static City parseLine(String line) {\n        String[] parts = line.split(\",\", 4);\n        if (parts.length &lt; 4) throw new IllegalArgumentException(\"Nieprawid\u0142owy format linii: \" + line);\n        String name = parts[0].trim();\n        int tz = Integer.parseInt(parts[1].trim());\n        String latitude = parts[2].trim();\n        String longitude = parts[3].trim();\n        return new City(name, tz, latitude, longitude);\n    }\n\n    public static Map&lt;String, City&gt; parseFile(String path) throws IOException {\n        Map&lt;String, City&gt; map = new LinkedHashMap&lt;&gt;();\n        List&lt;String&gt; lines = Files.readAllLines(Paths.get(path));\n        for (int i = 1; i &lt; lines.size(); i++) { // pomijamy nag\u0142\u00f3wek\n            String line = lines.get(i).trim();\n            if (!line.isEmpty()) {\n                City city = parseLine(line);\n                map.put(city.getName(), city);\n            }\n        }\n        return map;\n    }\n\n    /**\n     * Zwraca czas miejscowy obliczony na podstawie d\u0142ugo\u015bci geograficznej.\n     * @param zoneTime czas zgodny ze stref\u0105 czasow\u0105 miasta\n     * @return czas miejscowy (LocalTime)\n     */\n    public LocalTime localMeanTime(LocalTime zoneTime) {\n        double longitudeDeg = parseLongitudeToDegrees(this.longitude);\n        // Przesuni\u0119cie godzinowe: -180 -&gt; -12h, 0 -&gt; 0h, 180 -&gt; +12h\n        double offsetHours = longitudeDeg / 15.0;\n        int secondsOffset = (int)Math.round(offsetHours * 3600);\n        return zoneTime.plusSeconds(secondsOffset);\n    }\n\n    /**\n     * Parsuje d\u0142ugo\u015b\u0107 geograficzn\u0105 w formacie \"21.0122 E\" lub \"77.0428 W\" na stopnie (ujemne dla W).\n     */\n    private static double parseLongitudeToDegrees(String lon) {\n        String[] parts = lon.trim().split(\"\\\\s+\");\n        double value = Double.parseDouble(parts[0].replace(',', '.'));\n        if (parts.length &gt; 1 &amp;&amp; (parts[1].equalsIgnoreCase(\"W\") || parts[1].equalsIgnoreCase(\"W.\"))) {\n            value = -value;\n        }\n        return value;\n    }\n\n    @Override\n    public String toString() {\n        return name + \" [strefa: \" + summerTimeZone + \", lat: \" + latitude + \", lon: \" + longitude + \"]\";\n    }\n\n    /**\n     * Komparator por\u00f3wnuj\u0105cy miasta wed\u0142ug bezwzgl\u0119dnej r\u00f3\u017cnicy mi\u0119dzy czasem miejscowym a strefowym.\n     * Miasta z najwi\u0119ksz\u0105 r\u00f3\u017cnic\u0105 s\u0105 na pocz\u0105tku.\n     */\n    public static int worstTimezoneFit(City a, City b) {\n        int diffA = Math.abs(a.getLocalMeanTimeOffsetSeconds());\n        int diffB = Math.abs(b.getLocalMeanTimeOffsetSeconds());\n        // Najwi\u0119ksza r\u00f3\u017cnica - pierwsze\n        return Integer.compare(diffB, diffA);\n    }\n\n    /**\n     * Zwraca r\u00f3\u017cnic\u0119 (w sekundach) mi\u0119dzy czasem miejscowym a strefowym.\n     */\n    public int getLocalMeanTimeOffsetSeconds() {\n        double longitudeDeg = parseLongitudeToDegrees(this.longitude);\n        double offsetHours = longitudeDeg / 15.0;\n        int secondsOffset = (int)Math.round(offsetHours * 3600);\n        int strefaSeconds = this.summerTimeZone * 3600;\n        return secondsOffset - strefaSeconds;\n    }\n\n    /**\n     * Generuje pliki SVG zegar\u00f3w analogowych dla listy miast.\n     * @param cities lista miast\n     * @param clock obiekt AnalogClock (b\u0119dzie zmienia\u0142 miasto i czas)\n     */\n    public static void generateAnalogClocksSvg(List&lt;City&gt; cities, AnalogClock clock) throws Exception {\n        String dirName = clock.toString();\n        File dir = new File(dirName);\n        if (!dir.exists()) {\n            dir.mkdir();\n        }\n        for (City city : cities) {\n            clock.setCity(city);\n            clock.setCurrentTime();\n            String fileName = dirName + File.separator + city.getName().replaceAll(\"[^a-zA-Z0-9_\\\\-]\", \"_\") + \".svg\";\n            clock.toSvg(fileName);\n        }\n    }\n}\n</code></pre>"},{"location":"java_kolokwium_24/#przykad-uzycia-klasy-city-w-klasie-main-krok-3","title":"Przyk\u0142ad u\u017cycia klasy City w klasie Main (Krok 3)","text":"<pre><code>// filepath: src\\\\Main.java\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        String path = \"src\\\\strefy.csv\";\n        var cityMap = City.parseFile(path);\n        System.out.println(\"Wczytane miasta:\");\n        for (var entry : cityMap.entrySet()) {\n            System.out.println(entry.getKey() + \" -&gt; \" + entry.getValue());\n        }\n    }\n}\n</code></pre>"},{"location":"java_kolokwium_24/#krok-4-powiazanie-clock-z-miastem-i-zmiana-czasu-przy-zmianie-miasta","title":"Krok 4. Powi\u0105zanie Clock z miastem i zmiana czasu przy zmianie miasta","text":"<p>W klasie <code>Clock</code> dodaj prywatne pole <code>City</code>. Zmodyfikuj konstruktor tak, aby przyjmowa\u0142 referencj\u0119 na obiekt <code>City</code> i ustawia\u0142 j\u0105 w tym polu. Dodaj publiczn\u0105 metod\u0119 <code>setCity</code>, kt\u00f3ra przyjmie referencj\u0119 na obiekt <code>City</code> i zast\u0105pi w obiekcie <code>Clock</code> dotychczasow\u0105 referencj\u0119 na <code>City</code>. Zmiana miasta powinna spowodowa\u0107 zmian\u0119 wskazywanej godziny (np. zmiana Warszawy na Kij\u00f3w powinna zwi\u0119kszy\u0107 godzin\u0119 o 1 lub ewentualnie z 23 na 0).</p>"},{"location":"java_kolokwium_24/#implementacja-zmian-w-klasie-clock","title":"Implementacja zmian w klasie Clock","text":"<pre><code>// filepath: src\\Clock.java\nimport java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\n\npublic abstract class Clock {\n    protected LocalTime time;\n    private static final DateTimeFormatter FORMATTER = DateTimeFormatter.ofPattern(\"HH:mm:ss\");\n    private City city;\n\n    public Clock(City city) {\n        this.city = city;\n        this.time = null;\n    }\n\n    protected void onTimeChanged() {\n        // domy\u015blnie nic nie robi, do nadpisania w AnalogClock\n    }\n\n    public void setCurrentTime() {\n        this.time = LocalTime.now();\n        onTimeChanged();\n    }\n\n    public void setTime(int hour, int minute, int second) {\n        if (hour &lt; 0 || hour &gt; 23) {\n            throw new IllegalArgumentException(\"Godzina (\" + hour + \") musi by\u0107 w zakresie 0-23.\");\n        }\n        if (minute &lt; 0 || minute &gt; 59) {\n            throw new IllegalArgumentException(\"Minuta (\" + minute + \") musi by\u0107 w zakresie 0-59.\");\n        }\n        if (second &lt; 0 || second &gt; 59) {\n            throw new IllegalArgumentException(\"Sekunda (\" + second + \") musi by\u0107 w zakresie 0-59.\");\n        }\n        this.time = LocalTime.of(hour, minute, second);\n        onTimeChanged();\n    }\n\n    /**\n     * Ustawia nowe miasto i przelicza czas na czas strefowy nowego miasta.\n     */\n    public void setCity(City newCity) {\n        if (this.city != null &amp;&amp; this.time != null) {\n            int oldTz = this.city.getSummerTimeZone();\n            int newTz = newCity.getSummerTimeZone();\n            int diff = newTz - oldTz;\n            this.time = this.time.plusHours(diff);\n        }\n        this.city = newCity;\n    }\n\n    public City getCity() {\n        return city;\n    }\n\n    @Override\n    public String toString() {\n        return time == null ? \"Brak ustawionego czasu\" : time.format(FORMATTER);\n    }\n}\n</code></pre>"},{"location":"java_kolokwium_24/#przykad-uzycia-setcity-w-klasie-main-krok-4","title":"Przyk\u0142ad u\u017cycia setCity w klasie Main (Krok 4)","text":"<pre><code>// filepath: src\\Main.java\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        var cityMap = City.parseFile(\"src\\\\strefy.csv\");\n        City warszawa = cityMap.get(\"Warszawa\");\n        City kijow = cityMap.get(\"Kij\u00f3w\");\n\n        Clock clock = new Clock(warszawa) {};\n        clock.setTime(22, 0, 0);\n        System.out.println(\"Czas w Warszawie: \" + clock + \" (\" + clock.getCity().getName() + \")\");\n\n        clock.setCity(kijow);\n        System.out.println(\"Po zmianie miasta na Kij\u00f3w: \" + clock + \" (\" + clock.getCity().getName() + \")\");\n    }\n}\n</code></pre>"},{"location":"java_kolokwium_24/#krok-5-obliczanie-czasu-miejscowego-na-podstawie-dugosci-geograficznej","title":"Krok 5. Obliczanie czasu miejscowego na podstawie d\u0142ugo\u015bci geograficznej","text":"<p>W klasie <code>City</code> napisz publiczn\u0105 metod\u0119: - <code>localMeanTime</code>, kt\u00f3ra przyjmie czas zgodny ze swoj\u0105 stref\u0105 czasow\u0105 i zwr\u00f3ci czas miejscowy obliczony na podstawie d\u0142ugo\u015bci geograficznej.</p> <p>D\u0142ugo\u015b\u0107 geograficzna przyjmuje warto\u015bci od -180 do +180 stopni, a odpowiadaj\u0105ce jej przesuni\u0119cie godzinowe warto\u015bci od -12 do +12 godzin. Przesuni\u0119cie czasu zmienia si\u0119 wprost proporcjonalnie do d\u0142ugo\u015bci geograficznej.</p> <p>Na przyk\u0142ad, je\u017celi w Lublinie, wed\u0142ug strefy czasowej, jest godzina 12:00:00, wed\u0142ug po\u0142o\u017cenia geograficznego, b\u0119dzie to 11:30:16.</p>"},{"location":"java_kolokwium_24/#implementacja-metody-localmeantime-w-klasie-city","title":"Implementacja metody localMeanTime w klasie City","text":"<pre><code>// filepath: src\\City.java\n// ...existing code...\nimport java.time.LocalTime;\n\npublic class City {\n    // ...existing code...\n\n    /**\n     * Zwraca czas miejscowy obliczony na podstawie d\u0142ugo\u015bci geograficznej.\n     * @param zoneTime czas zgodny ze stref\u0105 czasow\u0105 miasta\n     * @return czas miejscowy (LocalTime)\n     */\n    public LocalTime localMeanTime(LocalTime zoneTime) {\n        double longitudeDeg = parseLongitudeToDegrees(this.longitude);\n        // Przesuni\u0119cie godzinowe: -180 -&gt; -12h, 0 -&gt; 0h, 180 -&gt; +12h\n        double offsetHours = longitudeDeg / 15.0;\n        int secondsOffset = (int)Math.round(offsetHours * 3600);\n        return zoneTime.plusSeconds(secondsOffset);\n    }\n\n    /**\n     * Parsuje d\u0142ugo\u015b\u0107 geograficzn\u0105 w formacie \"21.0122 E\" lub \"77.0428 W\" na stopnie (ujemne dla W).\n     */\n    private static double parseLongitudeToDegrees(String lon) {\n        String[] parts = lon.trim().split(\"\\\\s+\");\n        double value = Double.parseDouble(parts[0].replace(',', '.'));\n        if (parts.length &gt; 1 &amp;&amp; (parts[1].equalsIgnoreCase(\"W\") || parts[1].equalsIgnoreCase(\"W.\"))) {\n            value = -value;\n        }\n        return value;\n    }\n\n    // ...existing code...\n}\n</code></pre>"},{"location":"java_kolokwium_24/#przykad-uzycia-localmeantime-w-klasie-main-krok-5","title":"Przyk\u0142ad u\u017cycia localMeanTime w klasie Main (Krok 5)","text":"<pre><code>// filepath: src\\Main.java\nimport java.time.LocalTime;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        var cityMap = City.parseFile(\"src\\\\strefy.csv\");\n        City lublin = cityMap.get(\"Lublin\");\n        LocalTime zoneTime = LocalTime.of(12, 0, 0);\n        LocalTime meanTime = lublin.localMeanTime(zoneTime);\n        System.out.println(\"Czas strefowy w Lublinie: \" + zoneTime);\n        System.out.println(\"Czas miejscowy w Lublinie: \" + meanTime);\n    }\n}\n</code></pre>"},{"location":"java_kolokwium_24/#wyjasnienie","title":"Wyja\u015bnienie","text":"<ul> <li>localMeanTime: Oblicza przesuni\u0119cie czasu na podstawie d\u0142ugo\u015bci geograficznej. Ka\u017cde 15 stopni d\u0142ugo\u015bci to 1 godzina przesuni\u0119cia (3600 sekund).</li> <li>Parsowanie d\u0142ugo\u015bci: Metoda <code>parseLongitudeToDegrees</code> zamienia d\u0142ugo\u015b\u0107 geograficzn\u0105 z formatu tekstowego na liczb\u0119, uwzgl\u0119dniaj\u0105c kierunek (E/W).</li> <li>Standardowe klasy Javy: U\u017cywamy <code>LocalTime.plusSeconds</code>, co pozwala wygodnie doda\u0107 (lub odj\u0105\u0107) przesuni\u0119cie czasowe.</li> </ul> <p>Dzi\u0119ki temu mo\u017cna \u0142atwo uzyska\u0107 dok\u0142adny czas miejscowy dla dowolnego miasta na podstawie jego po\u0142o\u017cenia geograficznego.</p>"},{"location":"java_kolokwium_24/#krok-6-sortowanie-miast-wedug-najwiekszej-roznicy-miedzy-czasem-miejscowym-a-strefowym","title":"Krok 6. Sortowanie miast wed\u0142ug najwi\u0119kszej r\u00f3\u017cnicy mi\u0119dzy czasem miejscowym a strefowym","text":"<p>W klasie <code>City</code> napisz publiczn\u0105 statyczn\u0105 metod\u0119: - <code>worstTimezoneFit</code>, tak, aby mog\u0142a by\u0107 u\u017cyta jako komparator dw\u00f3ch miast.</p> <p>Wynik sortowania przy u\u017cyciu tej metody powinien ustawi\u0107 na pocz\u0105tku kolekcji miasta, kt\u00f3rych r\u00f3\u017cnica mi\u0119dzy czasem miejscowym a czasem wynikaj\u0105cym ze strefy czasowej jest najwi\u0119ksza.</p>"},{"location":"java_kolokwium_24/#implementacja-metody-worsttimezonefit-w-klasie-city","title":"Implementacja metody worstTimezoneFit w klasie City","text":"<pre><code>// filepath: src\\City.java\n// ...existing code...\nimport java.util.Comparator;\nimport java.time.LocalTime;\n\npublic class City {\n    // ...existing code...\n\n    /**\n     * Komparator por\u00f3wnuj\u0105cy miasta wed\u0142ug bezwzgl\u0119dnej r\u00f3\u017cnicy mi\u0119dzy czasem miejscowym a strefowym.\n     * Miasta z najwi\u0119ksz\u0105 r\u00f3\u017cnic\u0105 s\u0105 na pocz\u0105tku.\n     */\n    public static int worstTimezoneFit(City a, City b) {\n        int diffA = Math.abs(a.getLocalMeanTimeOffsetSeconds());\n        int diffB = Math.abs(b.getLocalMeanTimeOffsetSeconds());\n        // Najwi\u0119ksza r\u00f3\u017cnica - pierwsze\n        return Integer.compare(diffB, diffA);\n    }\n\n    /**\n     * Zwraca r\u00f3\u017cnic\u0119 (w sekundach) mi\u0119dzy czasem miejscowym a strefowym.\n     */\n    public int getLocalMeanTimeOffsetSeconds() {\n        double longitudeDeg = parseLongitudeToDegrees(this.longitude);\n        double offsetHours = longitudeDeg / 15.0;\n        int secondsOffset = (int)Math.round(offsetHours * 3600);\n        int strefaSeconds = this.summerTimeZone * 3600;\n        return secondsOffset - strefaSeconds;\n    }\n\n    // ...existing code...\n}\n</code></pre>"},{"location":"java_kolokwium_24/#przykad-uzycia-sortowania-miast-w-klasie-main-krok-6","title":"Przyk\u0142ad u\u017cycia sortowania miast w klasie Main (Krok 6)","text":"<pre><code>// filepath: src\\Main.java\n// ...existing code...\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        var cityMap = City.parseFile(\"src\\\\strefy.csv\");\n        List&lt;City&gt; cities = new ArrayList&lt;&gt;(cityMap.values());\n        cities.sort(City::worstTimezoneFit);\n\n        System.out.println(\"Miasta posortowane wg najwi\u0119kszej r\u00f3\u017cnicy czasu miejscowego i strefowego:\");\n        for (City city : cities) {\n            System.out.println(city.getName());\n        }\n    }\n}\n</code></pre>"},{"location":"java_kolokwium_24/#wyjasnienie_1","title":"Wyja\u015bnienie","text":"<ul> <li>worstTimezoneFit: Por\u00f3wnuje dwa miasta wed\u0142ug bezwzgl\u0119dnej warto\u015bci r\u00f3\u017cnicy mi\u0119dzy czasem miejscowym a strefowym (w sekundach).</li> <li>getLocalMeanTimeOffsetSeconds: Oblicza r\u00f3\u017cnic\u0119 w sekundach mi\u0119dzy czasem miejscowym (na podstawie d\u0142ugo\u015bci geograficznej) a czasem strefowym (na podstawie strefy czasowej).</li> <li>Sortowanie: U\u017cywamy metody referencyjnej <code>City::worstTimezoneFit</code> jako komparatora w sortowaniu listy miast.</li> </ul> <p>Dzi\u0119ki temu mo\u017cna \u0142atwo znale\u017a\u0107 miasta, w kt\u00f3rych czas strefowy najbardziej odbiega od rzeczywistego czasu miejscowego.</p>"},{"location":"java_kolokwium_24/#krok-7-klasa-analogclock-i-generowanie-tarczy-zegara-w-svg","title":"Krok 7. Klasa AnalogClock i generowanie tarczy zegara w SVG","text":"<p>Zapoznaj si\u0119 z plikiem <code>zegar.svg</code> do\u0142\u0105czonym do tre\u015bci zadania.</p> <p>Napisz klas\u0119 <code>AnalogClock</code>, dziedzicz\u0105c\u0105 po <code>Clock</code>. Napisz w niej metod\u0119: - <code>toSvg</code>, kt\u00f3ra przyjmie \u015bcie\u017ck\u0119 do pliku i zapisze w nim kod SVG przedstawiaj\u0105cy tarcz\u0119 zegara (bez wskaz\u00f3wek).</p>"},{"location":"java_kolokwium_24/#implementacja-klasy-analogclock-z-metoda-tosvg","title":"Implementacja klasy AnalogClock z metod\u0105 toSvg","text":"<pre><code>// filepath: src\\AnalogClock.java\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic class AnalogClock extends Clock {\n    public AnalogClock(City city) {\n        super(city);\n    }\n\n    /**\n     * Zapisuje do pliku SVG tarcz\u0119 zegara (bez wskaz\u00f3wek).\n     * @param path \u015bcie\u017cka do pliku SVG\n     */\n    public void toSvg(String path) throws IOException {\n        String svg = \"\"\"\n        &lt;svg width=\"200\" height=\"200\" viewBox=\"-100 -100 200 200\" xmlns=\"http://www.w3.org/2000/svg\"&gt;\n          &lt;circle cx=\"0\" cy=\"0\" r=\"90\" fill=\"none\" stroke=\"black\" stroke-width=\"2\" /&gt;\n          &lt;g text-anchor=\"middle\"&gt;\n            &lt;text x=\"0\" y=\"-80\" dy=\"6\"&gt;12&lt;/text&gt;\n            &lt;text x=\"80\" y=\"0\" dy=\"4\"&gt;3&lt;/text&gt;\n            &lt;text x=\"0\" y=\"80\" dy=\"6\"&gt;6&lt;/text&gt;\n            &lt;text x=\"-80\" y=\"0\" dy=\"4\"&gt;9&lt;/text&gt;\n          &lt;/g&gt;\n        &lt;/svg&gt;\n        \"\"\";\n        try (FileWriter fw = new FileWriter(path)) {\n            fw.write(svg);\n        }\n    }\n}\n</code></pre>"},{"location":"java_kolokwium_24/#przykad-uzycia-klasy-analogclock-i-metody-tosvg-w-klasie-main-krok-7","title":"Przyk\u0142ad u\u017cycia klasy AnalogClock i metody toSvg w klasie Main (Krok 7)","text":"<pre><code>// filepath: src\\Main.java\n// ...existing code...\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        // ...existing code...\n        var cityMap = City.parseFile(\"src\\\\strefy.csv\");\n        City warszawa = cityMap.get(\"Warszawa\");\n        AnalogClock analogClock = new AnalogClock(warszawa);\n        analogClock.toSvg(\"src\\\\tarcza_warszawa.svg\");\n        System.out.println(\"Tarcza zegara SVG zosta\u0142a zapisana.\");\n    }\n}\n</code></pre>"},{"location":"java_kolokwium_24/#wyjasnienie_2","title":"Wyja\u015bnienie","text":"<ul> <li>AnalogClock: Dziedziczy po <code>Clock</code> i reprezentuje zegar analogowy.</li> <li>toSvg: Zapisuje do pliku prost\u0105 tarcz\u0119 zegara w formacie SVG (bez wskaz\u00f3wek). Kod SVG jest zgodny z przyk\u0142adem z pliku <code>zegar.svg</code>.</li> <li>FileWriter: U\u017cywamy standardowej klasy Javy do zapisu tekstu do pliku.</li> </ul> <p>Dzi\u0119ki temu mo\u017cna \u0142atwo wygenerowa\u0107 plik SVG z tarcz\u0105 zegara dla dowolnego miasta.</p>"},{"location":"java_kolokwium_24/#krok-8-abstrakcyjna-klasa-clockhand-do-reprezentacji-wskazowki-zegara","title":"Krok 8. Abstrakcyjna klasa ClockHand do reprezentacji wskaz\u00f3wki zegara","text":"<p>Napisz klas\u0119 abstrakcyjn\u0105 <code>ClockHand</code> reprezentuj\u0105c\u0105 wskaz\u00f3wk\u0119 zegara tarczowego. Klasa powinna posiada\u0107 publiczne, abstrakcyjne metody: - <code>setTime</code>, kt\u00f3ra przyjmuje obiekt <code>LocalTime</code>, - <code>toSvg</code>, kt\u00f3ra zwraca napis zawieraj\u0105cy znacznik SVG wskaz\u00f3wki.</p>"},{"location":"java_kolokwium_24/#implementacja-klasy-clockhand","title":"Implementacja klasy ClockHand","text":"<pre><code>// filepath: src\\ClockHand.java\nimport java.time.LocalTime;\n\npublic abstract class ClockHand {\n    /**\n     * Ustawia czas, na podstawie kt\u00f3rego wskaz\u00f3wka powinna by\u0107 ustawiona.\n     * @param time obiekt LocalTime\n     */\n    public abstract void setTime(LocalTime time);\n\n    /**\n     * Zwraca znacznik SVG reprezentuj\u0105cy wskaz\u00f3wk\u0119.\n     * @return napis SVG\n     */\n    public abstract String toSvg();\n}\n</code></pre>"},{"location":"java_kolokwium_24/#wyjasnienie_3","title":"Wyja\u015bnienie","text":"<ul> <li>ClockHand: Abstrakcyjna klasa bazowa dla wszystkich wskaz\u00f3wek zegara (godzinowej, minutowej, sekundowej).</li> <li>setTime: Pozwala ustawi\u0107 czas, na podstawie kt\u00f3rego wyliczana jest pozycja wskaz\u00f3wki.</li> <li>toSvg: Zwraca kod SVG reprezentuj\u0105cy wskaz\u00f3wk\u0119, gotowy do wstawienia do pliku SVG.</li> </ul> <p>Dzi\u0119ki temu \u0142atwo mo\u017cna rozszerzy\u0107 projekt o konkretne wskaz\u00f3wki, kt\u00f3re b\u0119d\u0105 generowa\u0107 odpowiedni kod SVG na podstawie ustawionego czasu.</p>"},{"location":"java_kolokwium_24/#krok-9-klasa-secondhand-wskazowka-sekundowa","title":"Krok 9. Klasa SecondHand \u2013 wskaz\u00f3wka sekundowa","text":"<p>Po klasie <code>ClockHand</code> podziedzicz klas\u0119 <code>SecondHand</code>. Powinna implementowa\u0107 metody klasy nadrz\u0119dnej: - <code>setTime</code>, kt\u00f3ra ustawia k\u0105t wskaz\u00f3wki dyskretnie (skokowo), na podstawie sk\u0142adowej sekund przekazanego czasu, - <code>toSvg</code>, kt\u00f3ra zwraca znacznik SVG przedstawiaj\u0105cy wskaz\u00f3wk\u0119 jako odcinek o okre\u015blonej d\u0142ugo\u015bci, grubo\u015bci i kolorze, obr\u00f3con\u0105 odpowiedni\u0105 liczb\u0119 stopni, wynikaj\u0105c\u0105 z ustawionego metod\u0105 <code>setTime</code> czasu.</p>"},{"location":"java_kolokwium_24/#implementacja-klasy-secondhand","title":"Implementacja klasy SecondHand","text":"<pre><code>// filepath: src\\SecondHand.java\nimport java.time.LocalTime;\n\npublic class SecondHand extends ClockHand {\n    private int angleDeg = 0;\n\n    @Override\n    public void setTime(LocalTime time) {\n        int seconds = time.getSecond();\n        // Ka\u017cda sekunda to 6 stopni (360/60)\n        this.angleDeg = seconds * 6;\n    }\n\n    @Override\n    public String toSvg() {\n        // D\u0142ugo\u015b\u0107 wskaz\u00f3wki: 80, grubo\u015b\u0107: 1, kolor: czerwony\n        return String.format(\n            \"&lt;line x1=\\\"0\\\" y1=\\\"0\\\" x2=\\\"0\\\" y2=\\\"-80\\\" stroke=\\\"red\\\" stroke-width=\\\"1\\\" transform=\\\"rotate(%d)\\\" /&gt;\",\n            angleDeg\n        );\n    }\n}\n</code></pre>"},{"location":"java_kolokwium_24/#wyjasnienie_4","title":"Wyja\u015bnienie","text":"<ul> <li>SecondHand: Dziedziczy po <code>ClockHand</code> i reprezentuje wskaz\u00f3wk\u0119 sekundow\u0105.</li> <li>setTime: Ustawia k\u0105t wskaz\u00f3wki na podstawie liczby sekund (0 sekund = 0\u00b0, 15 sekund = 90\u00b0, 30 sekund = 180\u00b0, itd.).</li> <li>toSvg: Generuje znacznik SVG dla wskaz\u00f3wki sekundowej, ustawiaj\u0105c jej obr\u00f3t zgodnie z k\u0105tem.</li> </ul> <p>Dzi\u0119ki temu mo\u017cna \u0142atwo doda\u0107 wskaz\u00f3wk\u0119 sekundow\u0105 do tarczy zegara SVG.</p>"},{"location":"java_kolokwium_24/#krok-10-klasy-hourhand-i-minutehand-wskazowki-godzinowa-i-minutowa","title":"Krok 10. Klasy HourHand i MinuteHand \u2013 wskaz\u00f3wki godzinowa i minutowa","text":"<p>Po klasie <code>ClockHand</code> podziedzicz jeszcze dwie klasy: <code>HourHand</code>, <code>MinuteHand</code> implementuj\u0105ce metody klasy nadrz\u0119dnej: - <code>setTime</code>, kt\u00f3ra ustawia k\u0105t wskaz\u00f3wki na podstawie czasu. Wskaz\u00f3wki powinny porusza\u0107 si\u0119 ruchem ci\u0105g\u0142ym z dok\u0142adno\u015bci\u0105 do jednej sekundy, - <code>toSvg</code>, analogicznie jak w klasie <code>SecondHand</code>, tak, aby wskaz\u00f3wki wizualnie odr\u00f3\u017cnia\u0142y si\u0119 od siebie.</p>"},{"location":"java_kolokwium_24/#implementacja-klasy-hourhand","title":"Implementacja klasy HourHand","text":"<pre><code>// filepath: src\\HourHand.java\nimport java.time.LocalTime;\n\npublic class HourHand extends ClockHand {\n    private double angleDeg = 0.0;\n\n    @Override\n    public void setTime(LocalTime time) {\n        int hour = time.getHour() % 12;\n        int minute = time.getMinute();\n        int second = time.getSecond();\n        // Ka\u017cda godzina to 30 stopni, ka\u017cda minuta to 0.5 stopnia, ka\u017cda sekunda to 0.5/60 stopnia\n        this.angleDeg = hour * 30 + minute * 0.5 + second * (0.5 / 60);\n    }\n\n    @Override\n    public String toSvg() {\n        // D\u0142ugo\u015b\u0107: 50, grubo\u015b\u0107: 4, kolor: czarny\n        return String.format(\n            \"&lt;line x1=\\\"0\\\" y1=\\\"0\\\" x2=\\\"0\\\" y2=\\\"-50\\\" stroke=\\\"black\\\" stroke-width=\\\"4\\\" transform=\\\"rotate(%.2f)\\\" /&gt;\",\n            angleDeg\n        );\n    }\n}\n</code></pre>"},{"location":"java_kolokwium_24/#implementacja-klasy-minutehand","title":"Implementacja klasy MinuteHand","text":"<pre><code>// filepath: src\\MinuteHand.java\nimport java.time.LocalTime;\n\npublic class MinuteHand extends ClockHand {\n    private double angleDeg = 0.0;\n\n    @Override\n    public void setTime(LocalTime time) {\n        int minute = time.getMinute();\n        int second = time.getSecond();\n        // Ka\u017cda minuta to 6 stopni, ka\u017cda sekunda to 0.1 stopnia\n        this.angleDeg = minute * 6 + second * 0.1;\n    }\n\n    @Override\n    public String toSvg() {\n        // D\u0142ugo\u015b\u0107: 70, grubo\u015b\u0107: 2, kolor: niebieski\n        return String.format(\n            \"&lt;line x1=\\\"0\\\" y1=\\\"0\\\" x2=\\\"0\\\" y2=\\\"-70\\\" stroke=\\\"blue\\\" stroke-width=\\\"2\\\" transform=\\\"rotate(%.2f)\\\" /&gt;\",\n            angleDeg\n        );\n    }\n}\n</code></pre>"},{"location":"java_kolokwium_24/#wyjasnienie_5","title":"Wyja\u015bnienie","text":"<ul> <li>HourHand: K\u0105t wyliczany jest z dok\u0142adno\u015bci\u0105 do sekundy, co daje p\u0142ynny ruch wskaz\u00f3wki godzinowej.</li> <li>MinuteHand: K\u0105t wyliczany jest z dok\u0142adno\u015bci\u0105 do sekundy, co daje p\u0142ynny ruch wskaz\u00f3wki minutowej.</li> <li>toSvg: Ka\u017cda wskaz\u00f3wka ma inn\u0105 d\u0142ugo\u015b\u0107, grubo\u015b\u0107 i kolor, by by\u0142y \u0142atwo rozr\u00f3\u017cnialne na tarczy zegara SVG.</li> </ul> <p>Dzi\u0119ki temu mo\u017cna wygenerowa\u0107 pe\u0142ny zegar analogowy z p\u0142ynnie poruszaj\u0105cymi si\u0119 wskaz\u00f3wkami.</p>"},{"location":"java_kolokwium_24/#krok-11-wskazowki-w-analogclock-i-automatyczna-aktualizacja-poozenia","title":"Krok 11. Wskaz\u00f3wki w AnalogClock i automatyczna aktualizacja po\u0142o\u017cenia","text":"<p>W klasie <code>AnalogClock</code> umie\u015b\u0107 prywatn\u0105, polimorficzn\u0105, finaln\u0105 list\u0119 wskaz\u00f3wek, zawieraj\u0105c\u0105 po jednej wskaz\u00f3wce ka\u017cdej klasy (<code>HourHand</code>, <code>MinuteHand</code>, <code>SecondHand</code>). Zmodyfikuj metod\u0119 <code>toSvg</code>, aby opr\u00f3cz tarczy, narysowane zosta\u0142y tak\u017ce wskaz\u00f3wki. Niech ustawienie godziny zegara metodami z kroku 1. (<code>setCurrentTime</code>, <code>setTime</code>) powoduje zmian\u0119 po\u0142o\u017cenia wskaz\u00f3wek. Rozwi\u0105zanie: dodaj do klasy <code>Clock</code> metod\u0119 chronion\u0105 <code>onTimeChanged()</code>, kt\u00f3r\u0105 wywo\u0142uj\u0105 metody ustawiaj\u0105ce czas. W <code>AnalogClock</code> nadpisz t\u0119 metod\u0119 i aktualizuj po\u0142o\u017cenie wskaz\u00f3wek.</p>"},{"location":"java_kolokwium_24/#implementacja-zmian-w-klasie-analogclock","title":"Implementacja zmian w klasie AnalogClock","text":"<pre><code>// filepath: src\\AnalogClock.java\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Arrays;\n\npublic class AnalogClock extends Clock {\n    private final List&lt;ClockHand&gt; hands;\n\n    public AnalogClock(City city) {\n        super(city);\n        hands = Arrays.asList(new HourHand(), new MinuteHand(), new SecondHand());\n    }\n\n    @Override\n    protected void onTimeChanged() {\n        if (time != null) {\n            for (ClockHand hand : hands) {\n                hand.setTime(time);\n            }\n        }\n    }\n\n    /**\n     * Zapisuje do pliku SVG tarcz\u0119 zegara wraz ze wskaz\u00f3wkami.\n     * @param path \u015bcie\u017cka do pliku SVG\n     */\n    @Override\n    public void toSvg(String path) throws IOException {\n        StringBuilder svg = new StringBuilder();\n        svg.append(\"\"\"\n        &lt;svg width=\"200\" height=\"200\" viewBox=\"-100 -100 200 200\" xmlns=\"http://www.w3.org/2000/svg\"&gt;\n          &lt;circle cx=\"0\" cy=\"0\" r=\"90\" fill=\"none\" stroke=\"black\" stroke-width=\"2\" /&gt;\n          &lt;g text-anchor=\"middle\"&gt;\n            &lt;text x=\"0\" y=\"-80\" dy=\"6\"&gt;12&lt;/text&gt;\n            &lt;text x=\"80\" y=\"0\" dy=\"4\"&gt;3&lt;/text&gt;\n            &lt;text x=\"0\" y=\"80\" dy=\"6\"&gt;6&lt;/text&gt;\n            &lt;text x=\"-80\" y=\"0\" dy=\"4\"&gt;9&lt;/text&gt;\n          &lt;/g&gt;\n        \"\"\");\n        for (ClockHand hand : hands) {\n            svg.append(hand.toSvg()).append(\"\\n\");\n        }\n        svg.append(\"&lt;/svg&gt;\");\n        try (FileWriter fw = new FileWriter(path)) {\n            fw.write(svg.toString());\n        }\n    }\n}\n</code></pre>"},{"location":"java_kolokwium_24/#modyfikacja-klasy-clock-dodanie-ontimechanged","title":"Modyfikacja klasy Clock \u2013 dodanie onTimeChanged","text":"<pre><code>// filepath: src\\Clock.java\n// ...existing code...\npublic abstract class Clock {\n    // ...existing code...\n\n    protected void onTimeChanged() {\n        // domy\u015blnie nic nie robi, do nadpisania w AnalogClock\n    }\n\n    public void setCurrentTime() {\n        this.time = LocalTime.now();\n        onTimeChanged();\n    }\n\n    public void setTime(int hour, int minute, int second) {\n        if (hour &lt; 0 || hour &gt; 23) {\n            throw new IllegalArgumentException(\"Godzina (\" + hour + \") musi by\u0107 w zakresie 0-23.\");\n        }\n        if (minute &lt; 0 || minute &gt; 59) {\n            throw new IllegalArgumentException(\"Minuta (\" + minute + \") musi by\u0107 w zakresie 0-59.\");\n        }\n        if (second &lt; 0 || second &gt; 59) {\n            throw new IllegalArgumentException(\"Sekunda (\" + second + \") musi by\u0107 w zakresie 0-59.\");\n        }\n        this.time = LocalTime.of(hour, minute, second);\n        onTimeChanged();\n    }\n\n    // ...existing code...\n}\n</code></pre>"},{"location":"java_kolokwium_24/#wyjasnienie_6","title":"Wyja\u015bnienie","text":"<ul> <li>Lista hands: Przechowuje wszystkie wskaz\u00f3wki (godzinowa, minutowa, sekundowa) jako obiekty polimorficzne.</li> <li>onTimeChanged: Chroniona metoda wywo\u0142ywana po ka\u017cdej zmianie czasu. W <code>AnalogClock</code> aktualizuje po\u0142o\u017cenie wskaz\u00f3wek.</li> <li>toSvg: Rysuje tarcz\u0119 oraz wszystkie wskaz\u00f3wki.</li> <li>Brak nadpisywania setTime/setCurrentTime: Dzi\u0119ki <code>onTimeChanged</code> nie trzeba nadpisywa\u0107 tych metod w podklasach.</li> </ul> <p>To rozwi\u0105zanie jest elastyczne, czytelne i zgodne z zasadami OOP.</p>"},{"location":"java_kolokwium_24/#krok-12-generowanie-wielu-zegarow-analogowych-svg-dla-miast","title":"Krok 12. Generowanie wielu zegar\u00f3w analogowych SVG dla miast","text":"<p>W klasie <code>City</code> napisz publiczn\u0105 metod\u0119 statyczn\u0105 <code>generateAnalogClocksSvg</code>, kt\u00f3ra przyjmie list\u0119 obiekt\u00f3w <code>City</code> oraz obiekt <code>AnalogClock</code>. Metoda powinna za\u0142o\u017cy\u0107 katalog o nazwie b\u0119d\u0105cej wynikiem funkcji <code>toString</code> obiektu zegara. W katalogu, dla ka\u017cdego miasta z listy, nale\u017cy utworzy\u0107 plik SVG o nazwie odpowiadaj\u0105cej nazwie miasta. Pliki powinny zawiera\u0107 wynik dzia\u0142ania metody <code>toSvg</code> zegara w kolejnych miastach.</p>"},{"location":"java_kolokwium_24/#implementacja-metody-generateanalogclockssvg-w-klasie-city","title":"Implementacja metody generateAnalogClocksSvg w klasie City","text":"<pre><code>// filepath: src\\City.java\n// ...existing code...\nimport java.util.List;\nimport java.io.File;\n\npublic class City {\n    // ...existing code...\n\n    /**\n     * Generuje pliki SVG zegar\u00f3w analogowych dla listy miast.\n     * @param cities lista miast\n     * @param clock obiekt AnalogClock (b\u0119dzie zmienia\u0142 miasto i czas)\n     */\n    public static void generateAnalogClocksSvg(List&lt;City&gt; cities, AnalogClock clock) throws Exception {\n        String dirName = clock.toString();\n        File dir = new File(dirName);\n        if (!dir.exists()) {\n            dir.mkdir();\n        }\n        for (City city : cities) {\n            clock.setCity(city);\n            clock.setCurrentTime();\n            String fileName = dirName + File.separator + city.getName().replaceAll(\"[^a-zA-Z0-9_\\\\-]\", \"_\") + \".svg\";\n            clock.toSvg(fileName);\n        }\n    }\n\n    // ...existing code...\n}\n</code></pre>"},{"location":"java_kolokwium_24/#przykad-uzycia-generateanalogclockssvg-w-klasie-main-krok-12","title":"Przyk\u0142ad u\u017cycia generateAnalogClocksSvg w klasie Main (Krok 12)","text":"<pre><code>// filepath: src\\Main.java\n// ...existing code...\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        var cityMap = City.parseFile(\"src\\\\strefy.csv\");\n        List&lt;City&gt; cities = new ArrayList&lt;&gt;(cityMap.values());\n        City wzorcoweMiasto = cityMap.get(\"Warszawa\");\n        AnalogClock clock = new AnalogClock(wzorcoweMiasto);\n        City.generateAnalogClocksSvg(cities, clock);\n        System.out.println(\"Wygenerowano SVG dla wszystkich miast.\");\n    }\n}\n</code></pre>"},{"location":"java_kolokwium_24/#wyjasnienie_7","title":"Wyja\u015bnienie","text":"<ul> <li>generateAnalogClocksSvg: Tworzy katalog o nazwie b\u0119d\u0105cej wynikiem <code>toString()</code> zegara (np. aktualny czas), a nast\u0119pnie dla ka\u017cdego miasta ustawia miasto i czas w zegarze, generuje plik SVG z nazw\u0105 miasta.</li> <li>Bezpieczne nazwy plik\u00f3w: Zamienia znaki niealfanumeryczne w nazwie miasta na podkre\u015blenia.</li> <li>Wsp\u00f3\u0142dzielenie obiektu AnalogClock: Zegar jest jeden, zmienia tylko miasto i czas dla ka\u017cdego SVG.</li> </ul> <p>Dzi\u0119ki temu mo\u017cna \u0142atwo wygenerowa\u0107 zestaw plik\u00f3w SVG z zegarami dla wszystkich miast z listy.</p>"},{"location":"java_other/","title":"Deep, Shallow i Lazy Copy (z przyk\u0142adami i referencj\u0105)","text":"<ul> <li>Shallow copy: kopiuje tylko referencje do obiekt\u00f3w, wi\u0119c zmiana w jednym obiekcie wp\u0142ywa na drugi, je\u015bli zawiera referencje do tych samych obiekt\u00f3w. <pre><code>List&lt;Person&gt; original = new ArrayList&lt;&gt;();\nList&lt;Person&gt; shallowCopy = new ArrayList&lt;&gt;(original); // tylko referencje\n</code></pre></li> <li>Deep copy: tworzy nowe instancje wszystkich obiekt\u00f3w, wi\u0119c zmiany w kopii nie wp\u0142ywaj\u0105 na orygina\u0142. Wymaga jawnego kopiowania p\u00f3l z\u0142o\u017conych. <pre><code>List&lt;Person&gt; deepCopy = original.stream()\n    .map(person -&gt; new Person(person)) // zak\u0142adaj\u0105c konstruktor kopiuj\u0105cy\n    .collect(Collectors.toList());\n</code></pre></li> <li>Lazy copy: kopia tworzona dopiero przy modyfikacji (np. CopyOnWriteArrayList), oszcz\u0119dza pami\u0119\u0107 i czas przy niezmiennych kolekcjach.</li> </ul>"},{"location":"java_other/#builder-i-decorator","title":"Builder i Decorator","text":"<ul> <li>Builder: wzorzec projektowy pozwalaj\u0105cy na stopniowe budowanie z\u0142o\u017conych obiekt\u00f3w poprzez wywo\u0142ywanie metod po\u015brednich, poprawia czytelno\u015b\u0107 kodu i unika z\u0142o\u017conych konstruktor\u00f3w. <pre><code>Person p = new Person.Builder().name(\"Jan\").age(30).build();\n</code></pre></li> <li>Decorator: wzorzec umo\u017cliwiaj\u0105cy dynamiczne dodawanie nowych funkcjonalno\u015bci do obiekt\u00f3w bez zmiany ich kodu \u017ar\u00f3d\u0142owego, poprzez opakowanie ich w dodatkowe klasy. <pre><code>InputStream in = new BufferedInputStream(new FileInputStream(\"plik.txt\"));\n</code></pre></li> </ul>"},{"location":"java_other/#custom-exception-i-jak-wywoac","title":"Custom Exception i jak wywo\u0142a\u0107","text":"<p>Tworzenie w\u0142asnych wyj\u0105tk\u00f3w pozwala na lepsz\u0105 kontrol\u0119 nad obs\u0142ug\u0105 b\u0142\u0119d\u00f3w w aplikacji. <pre><code>public class CustomException extends Exception {\n    public CustomException(String message) {\n        super(message);\n    }\n}\n\nif (warunek_bledu) {\n    throw new CustomException(\"Customowy exception\");\n}\n</code></pre></p>"},{"location":"java_other/#scanner-pobieranie-informacji-od-usera","title":"Scanner - pobieranie informacji od usera","text":"<p>Scanner pozwala na \u0142atwe pobieranie danych wej\u015bciowych od u\u017cytkownika z konsoli. <pre><code>Scanner scanner = new Scanner(System.in);\nString name = scanner.nextLine();\nint age = scanner.nextInt();\n</code></pre></p>"},{"location":"java_other/#frombinaryfile-objectinputstream","title":"fromBinaryFile, ObjectInputStream","text":"<p>S\u0142u\u017cy do odczytu obiekt\u00f3w z pliku binarnego (serializacja/deserializacja). <pre><code>ObjectInputStream ois = new ObjectInputStream(new FileInputStream(\"plik.bin\"));\nMyObject obj = (MyObject) ois.readObject();\nois.close();\n</code></pre></p>"},{"location":"java_other/#chronounitdaysbetween","title":"ChronoUnit.DAYS.between","text":"<p>Pozwala obliczy\u0107 r\u00f3\u017cnic\u0119 w dniach (lub innych jednostkach czasu) mi\u0119dzy dwiema datami. <pre><code>long days = ChronoUnit.DAYS.between(birthDate, deathDate);\n</code></pre></p>"},{"location":"java_other/#komparatory-zwyke-i-implements-comparable","title":"Komparatory zwyk\u0142e i implements Comparable","text":"<ul> <li>Comparable: interfejs do naturalnego por\u00f3wnywania obiekt\u00f3w (np. sortowanie po jednym polu). <pre><code>class Person implements Comparable&lt;Person&gt; {\n    public int compareTo(Person other) {\n        return this.age - other.age;\n    }\n}\n</code></pre></li> <li>Comparator: umo\u017cliwia tworzenie r\u00f3\u017cnych sposob\u00f3w por\u00f3wnywania obiekt\u00f3w, np. po kilku polach lub w odwrotnej kolejno\u015bci. <pre><code>Collections.sort(list, new Comparator&lt;Person&gt;() {\n    public int compare(Person p1, Person p2) {\n        return Long.compare(p2.getLifespan(), p1.getLifespan());\n    }\n});\n</code></pre></li> </ul>"},{"location":"java_other/#java-test-apply-i-predicate","title":"Java test, apply i Predicate","text":"<ul> <li>Predicate: interfejs funkcyjny do testowania warunk\u00f3w (zwraca boolean).</li> <li>Function: interfejs funkcyjny do przekszta\u0142cania warto\u015bci. <pre><code>Predicate&lt;String&gt; isEmpty = String::isEmpty;\nboolean result = isEmpty.test(\"\");\nFunction&lt;Integer, Integer&gt; square = x -&gt; x * x;\nint y = square.apply(5);\n</code></pre></li> </ul>"},{"location":"java_other/#single-way-linked-list-implementation-generic","title":"Single way linked list implementation (generic)","text":"<p>Jednokierunkowa lista wi\u0105zana z u\u017cyciem typ\u00f3w generycznych. <pre><code>class Node&lt;T&gt; {\n    T data;\n    Node&lt;T&gt; next;\n    // konstruktor, gettery, settery\n}\n</code></pre></p>"},{"location":"java_other/#interface-vs-abstract-class","title":"Interface vs Abstract Class","text":"<ul> <li>Interface: zawiera tylko sygnatury metod (od Javy 8 mog\u0105 by\u0107 domy\u015blne implementacje i metody statyczne), nie mo\u017ce mie\u0107 stanu (p\u00f3l instancyjnych).</li> <li>Abstract class: mo\u017ce mie\u0107 zar\u00f3wno metody abstrakcyjne, jak i zaimplementowane, mo\u017ce mie\u0107 pola i konstruktor.</li> <li>Klasa mo\u017ce dziedziczy\u0107 tylko po jednej klasie abstrakcyjnej, ale implementowa\u0107 wiele interfejs\u00f3w.</li> <li>Interfejsy s\u0142u\u017c\u0105 do definiowania kontrakt\u00f3w, klasy abstrakcyjne do dziedziczenia wsp\u00f3lnej logiki.</li> </ul>"},{"location":"java_other/#generyczne-programowanie-getclass-hashcode-clone-rzutowanie-obiektow","title":"Generyczne programowanie, getClass, hashCode, clone, rzutowanie obiekt\u00f3w","text":"<ul> <li>Generyki: pozwalaj\u0105 pisa\u0107 klasy/metody operuj\u0105ce na r\u00f3\u017cnych typach bez utraty bezpiecze\u0144stwa typ\u00f3w.</li> <li>getClass(): zwraca klas\u0119 obiektu w czasie wykonania.</li> <li>hashCode(): zwraca kod skr\u00f3tu obiektu, u\u017cywany np. w HashMap.</li> <li>clone(): tworzy kopi\u0119 obiektu (wymaga implementacji Cloneable).</li> <li>Rzutowanie: zmiana typu referencji, wymaga jawnego castowania. <pre><code>T obj = (T) someObject; // rzutowanie\nobj.getClass();\nobj.hashCode();\nobj.clone();\n</code></pre></li> </ul>"},{"location":"java_other/#iterator-spliterator","title":"Iterator, Spliterator","text":"<ul> <li>Iterator: pozwala przechodzi\u0107 po elementach kolekcji w spos\u00f3b sekwencyjny.</li> <li>Spliterator: umo\u017cliwia podzia\u0142 kolekcji na cz\u0119\u015bci do przetwarzania r\u00f3wnoleg\u0142ego (np. w streamach). <pre><code>Iterator&lt;String&gt; it = list.iterator();\nwhile(it.hasNext()) { ... }\n\nSpliterator&lt;String&gt; spl = list.spliterator();\nspl.forEachRemaining(System.out::println);\n</code></pre></li> </ul>"},{"location":"java_other/#serializable","title":"Serializable","text":"<p>Interfejs <code>Serializable</code> umo\u017cliwia zapisanie stanu obiektu do strumienia (np. pliku) i p\u00f3\u017aniejsze jego odczytanie (serializacja/deserializacja). Nie posiada metod, jest tzw. interfejsem znacznikowym. <pre><code>class Person implements Serializable {\n    private static final long serialVersionUID = 1L;\n    // pola, konstruktory itd.\n}\n</code></pre> Aby obiekt m\u00f3g\u0142 by\u0107 zapisany do pliku przez <code>ObjectOutputStream</code>, musi implementowa\u0107 ten interfejs.</p>"},{"location":"java_other/#przydatne-rzeczy","title":"Przydatne rzeczy:","text":"<p><pre><code>String[] lineParts = line.split(\",\");\nstr.toLowerCase().contains(\"abc\");\nstr.isEmpty();\nDateTimeFormatter.ofPattern(\"dd.MM.yyyy\");\nLocalDate, LocalTime\nmap.get(key), map.put(key, value), map.containsKey(key)\ndate1.isBefore(date2), date1.isAfter(date2)\n</code></pre> Shift+F6 Ctrl Alt Shift L  </p> <pre><code>import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\nclass Hello {\n    public static void main(String a[]) {\n\n        Comparator&lt;String&gt; com = new Comparator&lt;String&gt;() {\n            public int compare(String i, String j)\n            {\n                if(i.length() &lt; j.length()) \n                    return 1;\n                else \n                    return -1;\n            }\n        };\n        List&lt;String&gt; names = new ArrayList&lt;&gt;();\n        names.add(\"Navin\");\n        names.add(\"Navin Reddy\");\n        names.add(\"Telusko\");\n        names.add(\"Navin Telusko\");\n\n        Collections.sort(names, com);\n\n        System.out.println(names);\n\n    }\n}\n</code></pre>"},{"location":"java_rw/","title":"Pliki tekstowe w Javie","text":""},{"location":"java_rw/#zapis-do-pliku","title":"Zapis do pliku","text":"<ul> <li>FileWriter \u2013 zapisuje znaki do pliku.</li> <li>PrintWriter \u2013 wygodne metody do zapisu tekstu (np. <code>println</code>).</li> <li>BufferedWriter \u2013 buforuje zapis, zwi\u0119ksza wydajno\u015b\u0107.</li> </ul> <p>Przyk\u0142ad: <pre><code>// Zapis do pliku przy u\u017cyciu BufferedWriter\ntry (BufferedWriter writer = new BufferedWriter(new FileWriter(\"plik.txt\"))) {\n    writer.write(\"Przyk\u0142adowy tekst\");\n    writer.newLine();\n    writer.write(\"Druga linia\");\n}\n</code></pre></p>"},{"location":"java_rw/#odczyt-z-pliku","title":"Odczyt z pliku","text":"<ul> <li>FileReader \u2013 czyta znaki z pliku.</li> <li>BufferedReader \u2013 buforuje odczyt, pozwala czyta\u0107 linie.</li> <li>Scanner \u2013 wygodne czytanie linii, s\u0142\u00f3w, liczb.</li> </ul> <p>Przyk\u0142ad: <pre><code>// Odczyt z pliku przy u\u017cyciu BufferedReader\ntry (BufferedReader reader = new BufferedReader(new FileReader(\"plik.txt\"))) {\n    String line;\n    while ((line = reader.readLine()) != null) {\n        System.out.println(line);\n    }\n}\n</code></pre></p> <pre><code>// Odczyt z pliku przy u\u017cyciu Scanner\ntry (Scanner scanner = new Scanner(new File(\"plik.txt\"))) {\n    while (scanner.hasNextLine()) {\n        System.out.println(scanner.nextLine());\n    }\n}\n</code></pre>"},{"location":"java_rw/#przykady-uzycia-roznych-klas","title":"Przyk\u0142ady u\u017cycia r\u00f3\u017cnych klas","text":""},{"location":"java_rw/#stringbuilder-odczyt-caego-pliku-do-stringa","title":"StringBuilder \u2013 odczyt ca\u0142ego pliku do Stringa","text":"<p>Pozwala na efektywne budowanie tekstu z wielu fragment\u00f3w, np. podczas odczytu pliku znak po znaku.</p> <pre><code>File file = new File(\"in.txt\");\nStringBuilder result = new StringBuilder();\ntry {\n    FileReader reader = new FileReader(file);\n    int next;\n    while ((next = reader.read()) != -1)\n        result.append((char) next);\n    reader.close();\n} catch (IOException e) {\n    System.err.println(\"Cannot access: \" + file.getName());\n}\nSystem.out.println(result);\n</code></pre>"},{"location":"java_rw/#bufferedreader-odczyt-pliku-linia-po-linii-do-stringbuildera","title":"BufferedReader \u2013 odczyt pliku linia po linii do StringBuildera","text":"<p>BufferedReader pozwala czyta\u0107 plik linia po linii, co jest wygodne przy analizie tekstu.</p> <pre><code>File file = new File(\"in.txt\");\nStringBuilder result = new StringBuilder();\ntry {\n    BufferedReader reader = new BufferedReader(new FileReader(file));\n    String line;\n    while ((line = reader.readLine()) != null)\n        result.append(line).append(\"\\n\");\n    reader.close();\n} catch (IOException e) {\n    System.err.println(\"Cannot access: \" + file.getName());\n}\nSystem.out.println(result);\n</code></pre>"},{"location":"java_rw/#pliki-binarne-w-javie","title":"Pliki binarne w Javie","text":""},{"location":"java_rw/#zapis-do-pliku-binarnego","title":"Zapis do pliku binarnego","text":"<ul> <li>FileOutputStream \u2013 zapis bajt\u00f3w do pliku.</li> <li>DataOutputStream \u2013 zapis typ\u00f3w prymitywnych w formacie binarnym.</li> </ul> <p>Przyk\u0142ad: <pre><code>// Zapis tablicy bajt\u00f3w do pliku binarnego\nFile file = new File(\"out.bin\");\nbyte[] data = {1, 2, 3, 4, 5};\ntry {\n    FileOutputStream fos = new FileOutputStream(file);\n    fos.write(data);\n    fos.close();\n} catch (IOException e) {\n    System.err.println(\"Cannot access: \" + file.getName());\n}\n</code></pre></p> <pre><code>// Zapis tablicy int\u00f3w do pliku binarnego (ka\u017cdy int na 4 bajty)\nFile file = new File(\"out.bin\");\nint[] data = {1, 2, 3, 4, 5};\ntry {\n    FileOutputStream fos = new FileOutputStream(file);\n    for (int i = 0; i &lt; data.length; i++) {\n        fos.write(data[i] &gt;&gt; 24);\n        fos.write(data[i] &gt;&gt; 16);\n        fos.write(data[i] &gt;&gt; 8);\n        fos.write(data[i]);\n    }\n    fos.close();\n} catch (IOException e) {\n    System.err.println(\"Cannot access: \" + file.getName());\n}\n</code></pre> <pre><code>// Zapis tablicy int\u00f3w przy u\u017cyciu DataOutputStream\nFile file = new File(\"out.bin\");\nint[] data = {1, 2, 3, 4, 5};\ntry {\n    FileOutputStream fos = new FileOutputStream(file);\n    DataOutputStream dos = new DataOutputStream(fos);\n    for (int i = 0; i &lt; data.length; i++)\n        dos.writeInt(data[i]);\n    dos.close();\n} catch (IOException e) {\n    System.err.println(\"Cannot access: \" + file.getName());\n}\n</code></pre>"},{"location":"java_rw/#odczyt-z-pliku-binarnego","title":"Odczyt z pliku binarnego","text":"<ul> <li>DataInputStream \u2013 odczyt typ\u00f3w prymitywnych z pliku binarnego.</li> </ul> <p>Przyk\u0142ad: <pre><code>// Odczyt tablicy int\u00f3w z pliku binarnego\nFile file = new File(\"in.bin\");\ntry {\n    FileInputStream fis = new FileInputStream(file);\n    DataInputStream dis = new DataInputStream(fis);\n    int size = (int) (file.length() / Integer.BYTES);\n    int[] data = new int[size];\n    for(int i=0; i&lt;size; ++i)\n        data[i] = dis.readInt();\n    for(int value: data) System.out.println(value);\n    dis.close();\n} catch (IOException e) {\n    System.err.println(\"Cannot access: \" + file.getName());\n}\n</code></pre></p>"},{"location":"java_rw/#dataoutputstream-zapis-tablicy-bajtow-do-pliku-binarnego","title":"DataOutputStream \u2013 zapis tablicy bajt\u00f3w do pliku binarnego","text":"<p>Mo\u017cna te\u017c zapisywa\u0107 bajty, cho\u0107 DataOutputStream jest najcz\u0119\u015bciej u\u017cywany do typ\u00f3w prymitywnych.</p> <pre><code>File file = new File(\"out.bin\");\nbyte[] data = {1, 2, 3, 4, 5};\ntry {\n    FileOutputStream fos = new FileOutputStream(file);\n    DataOutputStream dos = new DataOutputStream(fos);\n    for (int i = 0; i &lt; data.length; i++)\n        dos.writeByte(data[i]);\n    dos.close();\n} catch (IOException e) {\n    System.err.println(\"Cannot access: \" + file.getName());\n}\n</code></pre>"},{"location":"java_rw/#try-with-resources-automatyczne-zamykanie-strumieni","title":"Try-with-resources \u2013 automatyczne zamykanie strumieni","text":"<p>Blok try automatycznie zamyka wszystkie zadeklarowane zasoby po zako\u0144czeniu dzia\u0142ania.</p> <pre><code>File file = new File(\"in.bin\");\ntry (\n    FileInputStream fis = new FileInputStream(file);\n    DataInputStream dis = new DataInputStream(fis);\n) {\n    int size = (int) (file.length() / Integer.BYTES);\n    int[] data = new int[size];\n    for(int i=0; i&lt;size; ++i)\n        data[i] = dis.readInt();\n    for(int value: data) System.out.println(value);\n} catch (IOException e) {\n    System.err.println(\"Cannot access: \" + file.getName());\n}\n</code></pre> <p>java snippety i objasnienia</p>"},{"location":"java_string/","title":"Java string","text":""},{"location":"java_string/#formatowanie-wartosci-procentowych-w-java","title":"Formatowanie warto\u015bci procentowych w Java","text":"<p>Aby sformatowa\u0107 liczby jako procenty w Javie, mo\u017cna u\u017cy\u0107 klasy <code>String.format</code> lub <code>NumberFormat</code>.</p>"},{"location":"java_string/#przykad-z-stringformat","title":"Przyk\u0142ad z String.format","text":"<pre><code>double value = 0.2567;\nString percent = String.format(\"%.2f%%\", value * 100); // \"25.67%\"\n</code></pre> <ul> <li><code>%.2f</code> \u2013 liczba z dwoma miejscami po przecinku</li> <li><code>%%</code> \u2013 znak procenta</li> </ul>"},{"location":"java_string/#przykad-z-numberformat","title":"Przyk\u0142ad z NumberFormat","text":"<pre><code>import java.text.NumberFormat;\n\ndouble value = 0.2567;\nNumberFormat percentFormat = NumberFormat.getPercentInstance();\npercentFormat.setMinimumFractionDigits(2);\nString percent = percentFormat.format(value); // \"25,67%\"\n</code></pre> <ul> <li><code>getPercentInstance()</code> \u2013 zwraca format dla procent\u00f3w</li> <li><code>setMinimumFractionDigits(2)</code> \u2013 ustawia liczb\u0119 miejsc po przecinku</li> </ul>"},{"location":"java_string/#formatowanie-wartosci-procentowych-dla-roznych-typow","title":"Formatowanie warto\u015bci procentowych dla r\u00f3\u017cnych typ\u00f3w","text":""},{"location":"java_string/#int","title":"int","text":"<pre><code>int value = 25;\nString percent = String.format(\"%d%%\", value); // \"25%\"\n</code></pre>"},{"location":"java_string/#float","title":"float","text":"<pre><code>float value = 0.2567f;\nString percent = String.format(\"%.2f%%\", value * 100); // \"25.67%\"\n</code></pre>"},{"location":"java_string/#double","title":"double","text":"<pre><code>double value = 0.2567;\nString percent = String.format(\"%.2f%%\", value * 100); // \"25.67%\"\n</code></pre>"},{"location":"java_string/#string-gdy-wartosc-jest-w-stringu","title":"String (gdy warto\u015b\u0107 jest w Stringu)","text":"<pre><code>String value = \"25.67\";\nString percent = value + \"%\"; // \"25.67%\"\n</code></pre>"},{"location":"java_string/#uzycie-numberformat-dla-floatdouble","title":"U\u017cycie NumberFormat dla float/double","text":"<pre><code>import java.text.NumberFormat;\n\ndouble value = 0.2567;\nNumberFormat percentFormat = NumberFormat.getPercentInstance();\npercentFormat.setMinimumFractionDigits(2);\nString percent = percentFormat.format(value); // \"25,67%\"\n</code></pre>"},{"location":"java_string/#formatowanie-procentow-z-uwzglednieniem-locale","title":"Formatowanie procent\u00f3w z uwzgl\u0119dnieniem Locale","text":"<p>Mo\u017cesz u\u017cy\u0107 <code>Locale</code> w <code>String.format</code> oraz <code>NumberFormat</code>, aby dostosowa\u0107 formatowanie do konkretnego j\u0119zyka/kraju.</p>"},{"location":"java_string/#stringformat-z-locale","title":"String.format z Locale","text":"<pre><code>import java.util.Locale;\n\ndouble value = 0.2567;\nString percent = String.format(Locale.GERMANY, \"%.2f%%\", value * 100); // \"25,67%\"\nString percentUS = String.format(Locale.US, \"%.2f%%\", value * 100);    // \"25.67%\"\n</code></pre>"},{"location":"java_string/#numberformat-z-locale","title":"NumberFormat z Locale","text":"<pre><code>import java.text.NumberFormat;\nimport java.util.Locale;\n\ndouble value = 0.2567;\nNumberFormat percentFormatPL = NumberFormat.getPercentInstance(new Locale(\"pl\", \"PL\"));\npercentFormatPL.setMinimumFractionDigits(2);\nString percentPL = percentFormatPL.format(value); // \"25,67%\"\n\nNumberFormat percentFormatUS = NumberFormat.getPercentInstance(Locale.US);\npercentFormatUS.setMinimumFractionDigits(2);\nString percentUS = percentFormatUS.format(value); // \"25.67%\"\n</code></pre> <ul> <li>Locale wp\u0142ywa na separator dziesi\u0119tny i wygl\u0105d liczby.</li> </ul>"},{"location":"java_wyk7/","title":"Wyk\u0142ad 7. Programowanie funkcyjne w Javie","text":""},{"location":"java_wyk7/#strumienie-streams","title":"Strumienie (Streams)","text":"<p>Strumienie (<code>Stream</code>) to sekwencje danych, kt\u00f3re umo\u017cliwiaj\u0105 przetwarzanie zbior\u00f3w w spos\u00f3b deklaratywny (np. filtrowanie, mapowanie, redukcja). Pozwalaj\u0105 na operacje na kolekcjach bez konieczno\u015bci pisania p\u0119tli.</p> <p>Przyk\u0142ad: <pre><code>List&lt;String&gt; names = Arrays.asList(\"Ala\", \"Ola\", \"Ela\");\nnames.stream()\n    .filter(name -&gt; name.startsWith(\"A\"))\n    .forEach(System.out::println);\n</code></pre></p>"},{"location":"java_wyk7/#funktory","title":"Funktory","text":"<p>W Javie nie ma bezpo\u015bredniego poj\u0119cia funktora jak w C++, ale mo\u017cna je rozumie\u0107 jako obiekty, kt\u00f3re mo\u017cna wywo\u0142a\u0107 jak funkcje (np. poprzez interfejsy funkcyjne i lambdy).</p>"},{"location":"java_wyk7/#interfejsy-funkcyjne","title":"Interfejsy funkcyjne","text":"<p>Interfejs funkcyjny to interfejs z jedn\u0105 metod\u0105 abstrakcyjn\u0105. Przyk\u0142ady: <code>Runnable</code>, <code>Comparator</code>, <code>Function&lt;T,R&gt;</code>, <code>Predicate&lt;T&gt;</code>. Umo\u017cliwiaj\u0105 przekazywanie zachowa\u0144 jako parametr\u00f3w.</p> <p>Przyk\u0142ad: <pre><code>@FunctionalInterface\ninterface MyFunction {\n    void execute();\n}\n</code></pre></p>"},{"location":"java_wyk7/#funkcje-lambda","title":"Funkcje lambda","text":"<p>Funkcje lambda to skr\u00f3cona forma zapisu implementacji interfejs\u00f3w funkcyjnych. Pozwalaj\u0105 na przekazywanie funkcji jako argument\u00f3w.</p> <p>Przyk\u0142ad: <pre><code>MyFunction f = () -&gt; System.out.println(\"Hello!\");\nf.execute();\n</code></pre></p>"},{"location":"java_wyk7/#wykad-8-programowanie-generyczne-w-javie","title":"Wyk\u0142ad 8. Programowanie generyczne w Javie","text":""},{"location":"java_wyk7/#typ-object","title":"Typ Object","text":"<p><code>Object</code> to bazowy typ wszystkich klas w Javie. Pozwala na przechowywanie dowolnych obiekt\u00f3w, ale wymaga rzutowania przy pobieraniu.</p> <p>Przyk\u0142ad: <pre><code>Object obj = \"tekst\";\nString s = (String) obj;\n</code></pre></p>"},{"location":"java_wyk7/#szablony-klas-i-metod-generyki","title":"Szablony klas i metod (Generyki)","text":"<p>Generyki umo\u017cliwiaj\u0105 tworzenie klas i metod operuj\u0105cych na r\u00f3\u017cnych typach, bez utraty bezpiecze\u0144stwa typ\u00f3w.</p>"},{"location":"java_wyk7/#klasa-generyczna","title":"Klasa generyczna:","text":"<pre><code>class Box&lt;T&gt; {\n    private T value;\n    public void set(T value) { this.value = value; }\n    public T get() { return value; }\n}\nBox&lt;Integer&gt; intBox = new Box&lt;&gt;();\nintBox.set(123);\n</code></pre>"},{"location":"java_wyk7/#metoda-generyczna","title":"Metoda generyczna:","text":"<pre><code>public &lt;T&gt; void printArray(T[] array) {\n    for (T elem : array) {\n        System.out.println(elem);\n    }\n}\n</code></pre> <p>Podsumowanie: - Programowanie funkcyjne w Javie opiera si\u0119 na strumieniach, interfejsach funkcyjnych i lambdach. - Programowanie generyczne pozwala pisa\u0107 uniwersalne klasy/metody bez utraty bezpiecze\u0144stwa typ\u00f3w.</p>"},{"location":"live_temps/","title":"IntelliJ IDEA Live Templates (Java)","text":""},{"location":"live_temps/#output-templates","title":"\ud83d\udce4 Output Templates","text":"Abbreviation Description Expanded Code <code>sout</code> Print to stdout <code>System.out.println();</code> <code>soutv</code> Print variable <code>System.out.println(\"var = \" + var);</code> <code>soutm</code> Print current method name <code>System.out.println(\"methodName\");</code> <code>soutp</code> Print method parameters <code>System.out.println(\"param = \" + param);</code> <code>serr</code> Print to stderr <code>System.err.println();</code>"},{"location":"live_temps/#main-method","title":"\ud83e\uddf5 Main Method","text":"Abbreviation Description Expanded Code <code>psvm</code> Main method <code>public static void main(String[] args)</code> <code>main</code> Alias for <code>psvm</code> Same as above"},{"location":"live_temps/#loops","title":"\ud83d\udd04 Loops","text":"Abbreviation Description Expanded Code <code>fori</code> Classic for loop <code>for (int i = 0; i &lt; length; i++)</code> <code>iter</code> Enhanced for-each loop <code>for (Type item : collection)</code> <code>itar</code> For loop over array <code>for (int i = 0; i &lt; arr.length; i++)</code> <code>while</code> While loop <code>while (condition) { }</code>"},{"location":"live_temps/#conditionals","title":"\ud83d\udd01 Conditionals","text":"Abbreviation Description Expanded Code <code>ifn</code> If null check <code>if (object == null)</code> <code>inn</code> If not null check <code>if (object != null)</code> <code>instanceof</code> Instance check <code>if (object instanceof Type)</code> <code>switch</code> Switch statement <code>switch (expression)</code>"},{"location":"live_temps/#exceptions","title":"\u26a0\ufe0f Exceptions","text":"Abbreviation Description Expanded Code <code>try</code> Try-catch block <code>try { } catch (Exception e) { }</code> <code>tryf</code> Try-with-resources <code>try (Resource res = ...) { }</code> <code>thr</code> Throw new Exception <code>throw new Exception();</code>"},{"location":"live_temps/#return-declaration","title":"\ud83d\udd19 Return / Declaration","text":"Abbreviation Description Expanded Code <code>return</code> Return statement <code>return ;</code> <code>null</code> Return null <code>return null;</code>"},{"location":"live_temps/#class-method-field-templates","title":"\ud83d\udca1 Class / Method / Field Templates","text":"Abbreviation Description Expanded Code Example <code>inst</code> instanceof check <code>if (object instanceof Type)</code> <code>soutc</code> Print class <code>System.out.println(getClass());</code> <code>soutm</code> Print method name <code>System.out.println(\"method\");</code>"},{"location":"live_temps/#tips","title":"\ud83e\udde0 Tips","text":"<ul> <li>Use Tab to expand abbreviations.</li> <li>Customize or add your own in <code>Settings &gt; Editor &gt; Live Templates</code>.</li> <li>Use <code>$END$</code> in custom templates to mark cursor placement.</li> </ul>"},{"location":"notatka/","title":"Notatka: Projekt Genealogy \u2013 Java dla pocz\u0105tkuj\u0105cych","text":""},{"location":"notatka/#uzyte-elementy-jezyka-java","title":"U\u017cyte elementy j\u0119zyka Java","text":"<p>W projekcie genealogicznym wykorzystano wiele podstawowych i nieco bardziej zaawansowanych element\u00f3w j\u0119zyka Java. Oto najwa\u017cniejsze z nich:</p>"},{"location":"notatka/#1-klasy-i-obiekty","title":"1. Klasy i obiekty","text":"<ul> <li>Definiowanie w\u0142asnych klas (<code>Person</code>, <code>Family</code>, <code>PlantUMLRunner</code>).</li> <li>Tworzenie obiekt\u00f3w za pomoc\u0105 operatora <code>new</code>.</li> <li>Konstruktory (w tym z r\u00f3\u017cn\u0105 liczb\u0105 argument\u00f3w).</li> </ul>"},{"location":"notatka/#2-pola-i-metody","title":"2. Pola i metody","text":"<ul> <li>Prywatne pola (np. <code>private String firstName</code>).</li> <li>Publiczne metody (np. gettery, metody statyczne).</li> <li>Przeci\u0105\u017canie metod (np. r\u00f3\u017cne wersje konstruktora).</li> </ul>"},{"location":"notatka/#3-kolekcje","title":"3. Kolekcje","text":"<ul> <li>Listy (<code>List&lt;Person&gt;</code>, np. <code>ArrayList</code>).</li> <li>Zbiory (<code>Set&lt;Person&gt;</code>, np. <code>HashSet</code>).</li> <li>Mapy (<code>Map&lt;String, Person&gt;</code>, <code>Map&lt;String, List&lt;Person&gt;&gt;</code>).</li> </ul>"},{"location":"notatka/#4-praca-z-datami","title":"4. Praca z datami","text":"<ul> <li>Klasa <code>LocalDate</code> do reprezentacji daty urodzenia i \u015bmierci.</li> <li>Parsowanie dat z tekstu (<code>LocalDate.parse</code>).</li> </ul>"},{"location":"notatka/#5-wyjatki","title":"5. Wyj\u0105tki","text":"<ul> <li>Tworzenie w\u0142asnych wyj\u0105tk\u00f3w (np. <code>NegativeLifespanException</code>).</li> <li>Rzucanie i obs\u0142uga wyj\u0105tk\u00f3w (<code>throw</code>, <code>try-catch</code>).</li> </ul>"},{"location":"notatka/#6-interfejsy-funkcyjne-i-wyrazenia-lambda","title":"6. Interfejsy funkcyjne i wyra\u017cenia lambda","text":"<ul> <li>U\u017cycie interfejs\u00f3w funkcyjnych <code>Predicate&lt;T&gt;</code> i <code>Function&lt;T, R&gt;</code>.</li> <li>Przekazywanie funkcji jako argument\u00f3w do metod.</li> </ul>"},{"location":"notatka/#predicate","title":"Predicate","text":"<p><code>Predicate&lt;T&gt;</code> to interfejs funkcyjny reprezentuj\u0105cy funkcj\u0119 przyjmuj\u0105c\u0105 jeden argument typu <code>T</code> i zwracaj\u0105c\u0105 warto\u015b\u0107 typu <code>boolean</code>. U\u017cywany jest do testowania warunk\u00f3w, np. filtrowania listy:</p> <pre><code>Predicate&lt;Person&gt; isAlive = p -&gt; p.getDeathDate() == null;\nif (isAlive.test(person)) { ... }\n</code></pre>"},{"location":"notatka/#function","title":"Function","text":"<p><code>Function&lt;T, R&gt;</code> to interfejs funkcyjny reprezentuj\u0105cy funkcj\u0119 przyjmuj\u0105c\u0105 jeden argument typu <code>T</code> i zwracaj\u0105c\u0105 wynik typu <code>R</code>. Umo\u017cliwia przekszta\u0142canie warto\u015bci, np.:</p> <pre><code>Function&lt;String, String&gt; toYellow = line -&gt; line + \" #Yellow\";\nString result = toYellow.apply(\"object \\\"Jan Kowalski\\\"\");\n</code></pre>"},{"location":"notatka/#7-strumienie-streams","title":"7. Strumienie (Streams)","text":"<ul> <li>Filtrowanie, sortowanie i przetwarzanie kolekcji za pomoc\u0105 strumieni (<code>stream()</code>, <code>filter</code>, <code>map</code>, <code>sorted</code>, <code>collect</code>).</li> </ul>"},{"location":"notatka/#8-serializacja","title":"8. Serializacja","text":"<ul> <li>Zapisywanie i odczytywanie obiekt\u00f3w do/z pliku binarnego (<code>ObjectOutputStream</code>, <code>ObjectInputStream</code>).</li> </ul>"},{"location":"notatka/#9-praca-z-plikami","title":"9. Praca z plikami","text":"<ul> <li>Odczyt plik\u00f3w tekstowych (<code>BufferedReader</code>, <code>FileReader</code>).</li> <li>Zapis plik\u00f3w (<code>FileWriter</code>).</li> </ul>"},{"location":"notatka/#10-wywoanie-zewnetrznych-procesow","title":"10. Wywo\u0142anie zewn\u0119trznych proces\u00f3w","text":"<ul> <li>Uruchamianie programu PlantUML przez <code>ProcessBuilder</code>.</li> </ul>"},{"location":"notatka/#przydatne-ogolne-szablony-snippety-do-podobnych-zadan","title":"Przydatne og\u00f3lne szablony (snippety) do podobnych zada\u0144","text":""},{"location":"notatka/#1-klasa-z-polami-konstruktorem-i-getterami","title":"1. Klasa z polami, konstruktorem i getterami","text":"<pre><code>public class Example {\n    private String name;\n    private int age;\n\n    public Example(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() { return name; }\n    public int getAge() { return age; }\n}\n</code></pre>"},{"location":"notatka/#2-wczytywanie-pliku-csv-do-listy-obiektow","title":"2. Wczytywanie pliku CSV do listy obiekt\u00f3w","text":"<pre><code>List&lt;Example&gt; list = new ArrayList&lt;&gt;();\ntry (BufferedReader reader = new BufferedReader(new FileReader(\"plik.csv\"))) {\n    String line = reader.readLine(); // pomi\u0144 nag\u0142\u00f3wek\n    while ((line = reader.readLine()) != null) {\n        String[] parts = line.split(\",\");\n        list.add(new Example(parts[0], Integer.parseInt(parts[1])));\n    }\n}\n</code></pre>"},{"location":"notatka/#3-filtrowanie-i-sortowanie-listy","title":"3. Filtrowanie i sortowanie listy","text":"<pre><code>// Filtrowanie\nList&lt;Example&gt; filtered = list.stream()\n    .filter(e -&gt; e.getAge() &gt; 18)\n    .collect(Collectors.toList());\n\n// Sortowanie\nlist.sort(Comparator.comparing(Example::getAge));\n</code></pre>"},{"location":"notatka/#4-wasny-wyjatek","title":"4. W\u0142asny wyj\u0105tek","text":"<pre><code>public class MyException extends Exception {\n    public MyException(String message) {\n        super(message);\n    }\n}\n</code></pre>"},{"location":"notatka/#5-uzycie-predicate-i-function","title":"5. U\u017cycie Predicate i Function","text":"<pre><code>Predicate&lt;Example&gt; isAdult = e -&gt; e.getAge() &gt;= 18;\nFunction&lt;Example, String&gt; toStringFunc = e -&gt; e.getName() + \", wiek: \" + e.getAge();\n\nfor (Example e : list) {\n    if (isAdult.test(e)) {\n        System.out.println(toStringFunc.apply(e));\n    }\n}\n</code></pre>"},{"location":"notatka/#6-serializacja-listy-obiektow","title":"6. Serializacja listy obiekt\u00f3w","text":"<pre><code>// Zapis\ntry (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(\"data.bin\"))) {\n    out.writeObject(list);\n}\n// Odczyt\ntry (ObjectInputStream in = new ObjectInputStream(new FileInputStream(\"data.bin\"))) {\n    List&lt;Example&gt; loaded = (List&lt;Example&gt;) in.readObject();\n}\n</code></pre>"},{"location":"notatka/#7-wywoanie-zewnetrznego-programu-np-plantuml","title":"7. Wywo\u0142anie zewn\u0119trznego programu (np. PlantUML)","text":"<pre><code>ProcessBuilder pb = new ProcessBuilder(\"java\", \"-jar\", \"plantuml.jar\", \"diagram.puml\");\npb.inheritIO();\nProcess p = pb.start();\np.waitFor();\n</code></pre> <p>Te szablony mog\u0105 by\u0107 punktem wyj\u015bcia do rozwi\u0105zywania podobnych zada\u0144 w przysz\u0142o\u015bci.</p>"},{"location":"notatka/#podsumowanie","title":"Podsumowanie","text":"<p>Projekt genealogiczny to praktyczny przyk\u0142ad wykorzystania podstawowych i \u015bredniozaawansowanych element\u00f3w Javy: klas, kolekcji, wyj\u0105tk\u00f3w, pracy z plikami, datami oraz programowania funkcyjnego (Predicate, Function). Pozwala zrozumie\u0107, jak \u0142\u0105czy\u0107 r\u00f3\u017cne narz\u0119dzia j\u0119zyka w celu rozwi\u0105zania realnego problemu.</p>"}]}